import logging
import os
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)

yuan_rate = float(os.getenv("YUAN_RATE", 11.5))  # –∫—É—Ä—Å —é–∞–Ω—è

# FSM –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
class ConfirmOrderStates(StatesGroup):
    waiting_for_screenshot = State()
    waiting_for_size = State()
    waiting_for_price = State()
    waiting_for_confirmation = State()

def get_main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞"), KeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"))
    return markup

def get_edit_markup():
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω", callback_data="edit_screenshot"),
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä", callback_data="edit_size"),
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="edit_price"),
        InlineKeyboardButton("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm_order")
    )
    return markup

def get_manager_button():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me/dadmaksi"))
    return markup

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    try:
        with open("start.jpg", "rb") as photo:
            await bot.send_photo(
                message.chat.id,
                photo,
                caption="–ü—Ä–∏–≤–µ—Ç!üëãüèº\n\n–Ø –ø–æ–º–æ–≥—É –í–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!",
                reply_markup=get_main_menu()
            )
    except Exception as e:
        logging.error(f"Error sending start photo: {e}")
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(lambda message: message.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞")
async def start_cost_calc(message: types.Message):
    await message.answer("–≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏

@dp.message_handler(lambda message: message.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def start_order(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω —Ç–æ–≤–∞—Ä–∞:")
    await ConfirmOrderStates.waiting_for_screenshot.set()

# –ü—Ä–∏—ë–º —Å–∫—Ä–∏–Ω–∞
@dp.message_handler(state=ConfirmOrderStates.waiting_for_screenshot, content_types=types.ContentType.PHOTO)
async def order_screenshot_received(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    await state.update_data(screenshot=photo.file_id)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä (–º–æ–∂–µ—Ç –±—ã—Ç—å –±—É–∫–≤–µ–Ω–Ω—ã–º –∏–ª–∏ —á–∏—Å–ª–æ–≤—ã–º). –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä–∞ –Ω–µ—Ç, –ø—Ä–∏—à–ª–∏—Ç–µ 0.")
    await ConfirmOrderStates.waiting_for_size.set()

@dp.message_handler(state=ConfirmOrderStates.waiting_for_screenshot, content_types=types.ContentType.ANY)
async def invalid_screenshot(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.")

# –ü—Ä–∏—ë–º —Ä–∞–∑–º–µ—Ä–∞
@dp.message_handler(state=ConfirmOrderStates.waiting_for_size)
async def order_size_received(message: types.Message, state: FSMContext):
    size = message.text.strip()
    await state.update_data(size=size)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –ø–æ —Ü–µ–Ω–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    media = []
    for filename in ["order_price_1.jpg", "order_price_2.jpg", "order_price_3.jpg"]:
        try:
            media.append(InputMediaPhoto(open(filename, "rb")))
        except Exception as e:
            logging.error(f"Cannot open image {filename}: {e}")

    if media:
        await bot.send_media_group(message.chat.id, media)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    await ConfirmOrderStates.waiting_for_price.set()

# –ü—Ä–∏—ë–º —Ü–µ–Ω—ã –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —à–∞–≥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(state=ConfirmOrderStates.waiting_for_price)
async def order_price_received(message: types.Message, state: FSMContext):
    text = message.text.replace(",", ".").strip()
    try:
        price_yuan = float(text)
        await state.update_data(price_yuan=price_yuan)
        data = await state.get_data()

        rub_no_fee = round(price_yuan * yuan_rate, 2)
        rub_total = rub_no_fee

        caption = (
            f"üìã –ò—Ç–æ–≥ –∑–∞–∫–∞–∑–∞:\n"
            f"-------------------\n"
            f"üì∏ –°–∫—Ä–∏–Ω: (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∏–∂–µ)\n"
            f"üìè –†–∞–∑–º–µ—Ä: {data.get('size')}\n"
            f"üí¥ –°—Ç–æ–∏–º–æ—Å—Ç—å: ¬•{price_yuan}\n\n"
            f"üí∏ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {rub_total} ‚ÇΩ (–∫—É—Ä—Å {yuan_rate} ‚ÇΩ/¬•)\n\n"
            f"üöö –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
            f"600‚ÇΩ/–∫–≥ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞, –¥–∞–ª–µ–µ –ø–æ —Ç–∞—Ä–∏—Ñ—É CDEK/–ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏.\n\n"
            f"üì¶ –¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–∫–∞–∂–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –ø—Ä–∏–±—É–¥–µ—Ç –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫."
        )

        await bot.send_photo(message.chat.id, data.get("screenshot"), caption=caption, reply_markup=get_edit_markup())
        await ConfirmOrderStates.waiting_for_confirmation.set()

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1500")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@dp.callback_query_handler(state=ConfirmOrderStates.waiting_for_confirmation)
async def edit_order_callbacks(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    if call.data == "edit_screenshot":
        await call.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω —Ç–æ–≤–∞—Ä–∞:")
        await ConfirmOrderStates.waiting_for_screenshot.set()
        await call.answer()
    elif call.data == "edit_size":
        await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä (–∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ—Ç):")
        await ConfirmOrderStates.waiting_for_size.set()
        await call.answer()
    elif call.data == "edit_price":
        media = []
        for filename in ["order_price_1.jpg", "order_price_2.jpg", "order_price_3.jpg"]:
            try:
                media.append(InputMediaPhoto(open(filename, "rb")))
            except Exception as e:
                logging.error(f"Cannot open image {filename}: {e}")
        if media:
            await bot.send_media_group(call.message.chat.id, media)
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
        await ConfirmOrderStates.waiting_for_price.set()
        await call.answer()
    elif call.data == "confirm_order":
        caption = call.message.caption or ""
        caption += "\n\n‚û° –ü–µ—Ä–µ—à–ª–∏—Ç–µ –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
        await call.message.edit_caption(caption=caption, reply_markup=get_manager_button())
        await call.answer("–°–ø–∞—Å–∏–±–æ! –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω.")
        await state.finish()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ set yuan ---
@dp.message_handler(lambda message: message.text.lower().startswith("set yuan"))
async def set_yuan_rate(message: types.Message):
    global yuan_rate
    try:
        new_rate = float(message.text.split()[-1].replace(",", "."))
        yuan_rate = new_rate
        await message.answer(
            f"–ù–æ–≤—ã–π –∫—É—Ä—Å —é–∞–Ω—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {yuan_rate} ‚ÇΩ ‚úÖ\n\n"
            f"‚ö† –í–ù–ò–ú–ê–ù–ò–ï: —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫—É—Ä—Å. "
            f"–ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –æ–Ω —Å–±—Ä–æ—Å–∏—Ç—Å—è.\n"
            f"–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞ ‚Äî –∑–∞–π–¥–∏—Ç–µ –Ω–∞ Render –∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é YUAN_RATE."
        )
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: set yuan 11.7")

# --- –í–µ–±—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ---
async def handle(request):
    return web.Response(text="Bot is running")

async def start_webserver():
    app = web.Application()
    app.add_routes([web.get('/', handle)])
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.environ.get("PORT", 8000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    logging.info(f"Webserver started on port {port}")

async def main():
    await start_webserver()
    await dp.start_polling()

if __name__ == '__main__':
    asyncio.run(main())
