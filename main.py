import logging
import os
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID") or "-1002687753071"
YUAN_RATE = float(os.getenv("YUAN_RATE", 11.5))

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)

# ------- –ö–æ–º–∏—Å—Å–∏—è -------
CATEGORY_COMMISSION = {
    "–û–±—É–≤—å/–ö—É—Ä—Ç–∫–∏": 1000,
    "–î–∂–∏–Ω—Å—ã/–ö–æ—Ñ—Ç—ã": 800,
    "–®—Ç–∞–Ω—ã/–Æ–±–∫–∏/–ü–ª–∞—Ç—å—è": 600,
    "–§—É—Ç–±–æ–ª–∫–∏/–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": 600,
    "–ß–∞—Å—ã/–£–∫—Ä–∞—à–µ–Ω–∏—è": 1000,
    "–°—É–º–∫–∏/–†—é–∫–∑–∞–∫–∏": 900,
    "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ": 0
}

# ------- –î–æ—Å—Ç–∞–≤–∫–∞ -------
CATEGORY_DELIVERY = {
    "–û–±—É–≤—å/–ö—É—Ä—Ç–∫–∏": 1200,
    "–î–∂–∏–Ω—Å—ã/–ö–æ—Ñ—Ç—ã": 950,
    "–®—Ç–∞–Ω—ã/–Æ–±–∫–∏/–ü–ª–∞—Ç—å—è": 800,
    "–§—É—Ç–±–æ–ª–∫–∏/–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": 700,
    "–ß–∞—Å—ã/–£–∫—Ä–∞—à–µ–Ω–∏—è": 1000,
    "–°—É–º–∫–∏/–†—é–∫–∑–∞–∫–∏": 1000,
    "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ": 0
}

MAIN_MENU = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("üí¥ –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞"),
    KeyboardButton("üõçÔ∏è –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞")
)

CATEGORY_MENU = ReplyKeyboardMarkup(resize_keyboard=True).add(*[
    KeyboardButton(cat) for cat in CATEGORY_COMMISSION
])

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class OrderStates(StatesGroup):
    WaitingForPhoto = State()
    WaitingForSize = State()
    WaitingForCategory = State()
    WaitingForYuan = State()
    WaitingForContact = State()
    WaitingForAction = State()

class CalcStates(StatesGroup):
    WaitingForCategory = State()
    WaitingForYuan = State()

# --- start ---
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    try:
        with open("start.jpg", "rb") as photo:
            await bot.send_photo(
                message.chat.id,
                photo,
                caption="–ü—Ä–∏–≤–µ—Ç!üëãüèº\n\n–Ø –ø–æ–º–æ–≥—É –í–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!\n\n"
                        "üí¨ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:</b>",
                reply_markup=MAIN_MENU,
                parse_mode="HTML"
            )
    except:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëãüèº", reply_markup=MAIN_MENU)

# ================== –†–ê–°–ß–Å–¢ ===================
@dp.message_handler(lambda m: m.text == "üí¥ –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞")
async def start_calc(message: types.Message, state: FSMContext):
    await message.answer("üóÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=CATEGORY_MENU)
    await CalcStates.WaitingForCategory.set()

@dp.message_handler(lambda m: m.text in CATEGORY_COMMISSION, state=CalcStates.WaitingForCategory)
async def calc_category_chosen(message: types.Message, state: FSMContext):
    category = message.text
    await state.update_data(category=category)

    if category == "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ":
        await message.answer("‚ùó –¢–∞–∫–æ–µ —Å—á–∏—Ç–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É üòä",
                             reply_markup=InlineKeyboardMarkup().add(
                                 InlineKeyboardButton("–ú–µ–Ω–µ–¥–∂–µ—Ä", url="https://t.me/dadmaksi")
                             ))
        await state.finish()
        return

    await message.answer("üí¥ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (¬•):")
    await CalcStates.WaitingForYuan.set()

@dp.message_handler(state=CalcStates.WaitingForYuan)
async def calc_price_final(message: types.Message, state: FSMContext):
    text = message.text.replace(",", ".").strip()
    try:
        yuan = float(text)
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —é–∞–Ω—è—Ö.")
        return

    data = await state.get_data()
    category = data.get("category")

    commission = CATEGORY_COMMISSION[category]
    delivery = CATEGORY_DELIVERY[category]
    rub_price = round(yuan * YUAN_RATE, 2)
    total = round(rub_price + commission + delivery, 2)

    await message.answer(
        f"<b>üí∏ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ (—Ç–æ–≤–∞—Ä + –∫–æ–º–∏—Å—Å–∏—è + –¥–æ—Å—Ç–∞–≤–∫–∞): {total} ‚ÇΩ</b>\n\n"
        f"üí± –ö—É—Ä—Å: {YUAN_RATE} ‚ÇΩ\n"
        f"–¢–æ–≤–∞—Ä: ¬•{yuan} = {rub_price} ‚ÇΩ\n"
        f"–ö–æ–º–∏—Å—Å–∏—è: {commission} ‚ÇΩ\n"
        f"–î–æ—Å—Ç–∞–≤–∫–∞: {delivery} ‚ÇΩ\n\n"
        f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–§ (CDEK/–ü–æ—á—Ç–∞) –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫.\n\n"
        f"–ú–µ–Ω–µ–¥–∂–µ—Ä: <a href='https://t.me/dadmaksi'>@dadmaksi</a>",
        parse_mode="HTML",
        reply_markup=MAIN_MENU
    )
    await state.finish()

# ================== –û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê ===================
@dp.message_handler(lambda m: m.text == "üõçÔ∏è –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞")
async def start_order(message: types.Message, state: FSMContext):
    await state.update_data(order_items=[])
    await message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")
    await OrderStates.WaitingForPhoto.set()

@dp.message_handler(state=OrderStates.WaitingForPhoto, content_types=types.ContentTypes.PHOTO)
async def order_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo_id=message.photo[-1].file_id)
    await message.answer("üìè –ü—Ä–∏—à–ª–∏—Ç–µ —Ä–∞–∑–º–µ—Ä (–∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ—Ç):")
    await OrderStates.WaitingForSize.set()

@dp.message_handler(state=OrderStates.WaitingForSize)
async def order_size(message: types.Message, state: FSMContext):
    await state.update_data(size=message.text)
    await message.answer("üß∑ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=CATEGORY_MENU)
    await OrderStates.WaitingForCategory.set()

@dp.message_handler(lambda m: m.text in CATEGORY_COMMISSION, state=OrderStates.WaitingForCategory)
async def order_category(message: types.Message, state: FSMContext):
    await state.update_data(category=message.text)
    await message.answer("üí¥ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —é–∞–Ω—è—Ö (¬•):")
    await OrderStates.WaitingForYuan.set()

@dp.message_handler(state=OrderStates.WaitingForYuan)
async def order_yuan(message: types.Message, state: FSMContext):
    text = message.text.replace(",", ".").strip()
    try:
        yuan = float(text)
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return

    data = await state.get_data()
    order_items = data.get("order_items", [])
    new_item = {
        "photo_id": data["photo_id"],
        "size": data["size"],
        "category": data["category"],
        "yuan": yuan
    }
    order_items.append(new_item)
    await state.update_data(order_items=order_items)

    if "contact" not in data:
        await message.answer("üì± –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–∏–∫ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω):")
        await OrderStates.WaitingForContact.set()
    else:
        await send_summary(message, state)

@dp.message_handler(state=OrderStates.WaitingForContact)
async def order_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    await send_summary(message, state)

async def send_summary(message: types.Message, state: FSMContext):
    data = await state.get_data()
    items = data.get("order_items", [])
    contact = data.get("contact", "–ù–µ —É–∫–∞–∑–∞–Ω")

    text = "<b>üìù –í–∞—à –∑–∞–∫–∞–∑:</b>\n\n"
    grand_total = 0

    for idx, item in enumerate(items, start=1):
        rub = round(item["yuan"] * YUAN_RATE, 2)
        commission = CATEGORY_COMMISSION[item["category"]]
        delivery = CATEGORY_DELIVERY[item["category"]]

        if item["category"] != "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ":
            total = rub + commission + delivery
            grand_total += total
        else:
            total = 0

        caption = (
            f"<b>–¢–æ–≤–∞—Ä {idx}</b>\n"
            f"–†–∞–∑–º–µ—Ä: {item['size']}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item['category']}\n"
            f"–¶–µ–Ω–∞: ¬•{item['yuan']} = {rub} ‚ÇΩ\n"
        )
        if item["category"] != "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ":
            caption += f"–ö–æ–º–∏—Å—Å–∏—è: {commission} ‚ÇΩ\n–î–æ—Å—Ç–∞–≤–∫–∞: {delivery} ‚ÇΩ\n<b>–ò—Ç–æ–≥–æ: {total} ‚ÇΩ</b>\n"
        else:
            caption += "‚ùó –ò—Ç–æ–≥ —É—Ç–æ—á–Ω–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä\n"

        await bot.send_photo(message.chat.id, item["photo_id"], caption=caption, parse_mode="HTML")

    if grand_total:
        text += f"<b>üßæ –û–±—â–∞—è —Å—É–º–º–∞: {grand_total} ‚ÇΩ</b>\n\n"
    text += f"<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç:</b> {contact}"

    markup = ReplyKeyboardMarkup(resize_keyboard=True).add(
        "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É", "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ"
    )
    await message.answer(text, parse_mode="HTML", reply_markup=markup)
    await OrderStates.WaitingForAction.set()

# --- –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ ---
@dp.message_handler(lambda m: m.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", state="*")
async def back_to_start(message: types.Message, state: FSMContext):
    await state.finish()
    await start(message)

# --- Web server ---
async def handle(request):
    return web.Response(text="Bot is running")

async def start_webserver():
    app = web.Application()
    app.add_routes([web.get('/', handle)])
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.environ.get("PORT", 8000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(start_webserver())
    executor.start_polling(dp, skip_updates=True)
