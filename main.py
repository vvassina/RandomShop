
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–æ–º–∏—Å—Å–∏–∏
CATEGORY_FEES = {
    "–û–±—É–≤—å/–ö—É—Ä—Ç–∫–∏": 0.2,
    "–î–∂–∏–Ω—Å—ã/–ö–æ—Ñ—Ç—ã": 0.18,
    "–®—Ç–∞–Ω—ã/–Æ–±–∫–∏/–ü–ª–∞—Ç—å—è": 0.18,
    "–§—É—Ç–±–æ–ª–∫–∏/–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": 0.15,
    "–ß–∞—Å—ã/–£–∫—Ä–∞—à–µ–Ω–∏—è": 0.15,
    "–°—É–º–∫–∏/–†—é–∫–∑–∞–∫–∏": 0.2,
    "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ": 0.0  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
}

# –ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for cat in CATEGORY_FEES:
        kb.add(KeyboardButton(cat))
    return kb

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    with open("start.jpg", "rb") as photo:
        await bot.send_photo(
            message.chat.id,
            photo,
            caption="–ü—Ä–∏–≤–µ—Ç!üëãüèº\n\n–Ø –ø–æ–º–æ–≥—É –í–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!",
            reply_markup=get_main_menu()
        )

@dp.message_handler(lambda message: message.text in CATEGORY_FEES)
async def handle_category(message: types.Message):
    category = message.text

    if category == "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ":
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me/your_manager_link"))
        await message.answer("–¢–∞–∫–æ–µ —Å—á–∏—Ç–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É üòä", reply_markup=kb)
        return

    with open("price_input.jpg", "rb") as photo:
        await bot.send_photo(
            message.chat.id,
            photo,
            caption="–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö (¬•):"
        )

    dp.register_message_handler(
        lambda msg: calculate_total(msg, category), content_types=types.ContentTypes.TEXT)

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫—É—Ä—Å–∞ —é–∞–Ω—è (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –∞–¥–º–∏–Ω–æ–º)
yuan_rate = 11.5

@dp.message_handler(lambda message: message.text.lower().startswith("set yuan"))
async def set_yuan_rate(message: types.Message):
    global yuan_rate
    try:
        parts = message.text.split()
        if len(parts) == 3:
            yuan_rate = float(parts[2].replace(",", "."))
            await message.answer(f"–ù–æ–≤—ã–π –∫—É—Ä—Å —é–∞–Ω—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {yuan_rate} ‚ÇΩ")
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: set yuan 11.7")

async def calculate_total(message: types.Message, category: str):
    try:
        yuan = float(message.text.replace(",", "."))
        fee_rate = CATEGORY_FEES[category]
        rub_no_fee = round(yuan * yuan_rate, 2)
        fee = round(rub_no_fee * fee_rate, 2)
        rub = round(rub_no_fee + fee, 2)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!üî•", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")

        await message.answer(
            f"üí∏ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {rub} ‚ÇΩ\n\n"
            f"üîπ –°—Ç–æ–∏–º–æ—Å—Ç—å: ¬•{yuan} √ó {yuan_rate} ‚ÇΩ = {rub_no_fee} ‚ÇΩ\n"
            f"üîπ –ö–æ–º–∏—Å—Å–∏—è: {fee} ‚ÇΩ\n\n"
            f"üöö –£ –Ω–∞—Å –Ω–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:  \n"
            f"–¢–µ–ø–µ—Ä—å —Ç–∞—Ä–∏—Ñ 600‚ÇΩ/–∫–≥ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞,  \n"
            f"–¥–∞–ª–µ–µ –ø–æ —Ç–∞—Ä–∏—Ñ—É CDEK/–ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏ ü§ç\n\n"
            f"–¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –í–∞–º —Å–∫–∞–∂–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä,  \n"
            f"–∫–æ–≥–¥–∞ —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ!",
            reply_markup=markup
        )
    except:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ ‚Äî —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö.")

@dp.message_handler(lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
async def back_to_start(message: types.Message):
    await start(message)

@dp.message_handler(lambda message: message.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!üî•")
async def contact_manager(message: types.Message):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me/your_manager_link"))
    await message.answer("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", reply_markup=kb)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
