import logging
import os
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

CATEGORY_FEES = {
    "–û–±—É–≤—å/–ö—É—Ä—Ç–∫–∏": 1000,
    "–î–∂–∏–Ω—Å—ã/–ö–æ—Ñ—Ç—ã": 800,
    "–®—Ç–∞–Ω—ã/–Æ–±–∫–∏/–ü–ª–∞—Ç—å—è": 600,
    "–§—É—Ç–±–æ–ª–∫–∏/–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": 600,
    "–ß–∞—Å—ã/–£–∫—Ä–∞—à–µ–Ω–∏—è": 1000,
    "–°—É–º–∫–∏/–†—é–∫–∑–∞–∫–∏": 900,
    "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ": 0
}

yuan_rate = float(os.getenv("YUAN_RATE", 11.5))  # –∫—É—Ä—Å —é–∞–Ω—è
user_data = {}

def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üí¥ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞"))
    kb.add(KeyboardButton("üõç –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"))
    return kb

async def send_start_photo(chat_id):
    try:
        with open("start.jpg", "rb") as photo:
            await bot.send_photo(chat_id, photo, caption="–ü—Ä–∏–≤–µ—Ç!üëãüèº\n\n–Ø –ø–æ–º–æ–≥—É –í–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!", reply_markup=main_menu())
    except Exception as e:
        logging.error(f"Error sending start photo: {e}")
        await bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.", reply_markup=main_menu())

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    user_data[message.chat.id] = {}
    await send_start_photo(message.chat.id)

@dp.message_handler(lambda m: m.text == "üí¥ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞")
async def start_price_calc(message: types.Message):
    user_data[message.chat.id] = {"state": "waiting_category"}
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for cat in CATEGORY_FEES.keys():
        kb.add(KeyboardButton(cat))
    kb.add(KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=kb)

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("state") == "waiting_category")
async def handle_category(message: types.Message):
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ":
        user_data[message.chat.id] = {}
        return await send_start_photo(message.chat.id)
    if message.text not in CATEGORY_FEES:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
    user_data[message.chat.id]["category"] = message.text
    user_data[message.chat.id]["state"] = "waiting_price"
    try:
        media = types.MediaGroup()
        media.attach_photo(InputFile("order_price_1.jpg"))
        media.attach_photo(InputFile("order_price_2.jpg"))
        media.attach_photo(InputFile("order_price_3.jpg"))
        await bot.send_media_group(message.chat.id, media)
    except Exception as e:
        logging.error(f"Error sending price images: {e}")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("state") == "waiting_price")
async def handle_price(message: types.Message):
    text = message.text.replace(",", ".")
    try:
        price = float(text)
        user_data[message.chat.id]["price"] = price
        fixed_fee = CATEGORY_FEES[user_data[message.chat.id]["category"]]
        rub_no_fee = round(price * yuan_rate, 2)
        rub = round(rub_no_fee + fixed_fee, 2)
        user_data[message.chat.id]["fixed_fee"] = fixed_fee
        user_data[message.chat.id]["rub_no_fee"] = rub_no_fee
        user_data[message.chat.id]["total_rub"] = rub
        user_data[message.chat.id]["state"] = "done"

        kb = InlineKeyboardMarkup(row_width=1)
        kb.add(
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω", callback_data="edit_screenshot"),
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä", callback_data="edit_size"),
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="edit_price"),
            InlineKeyboardButton("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ!", callback_data="confirm_order")
        )

        # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî —Å–ø—Ä–æ—Å–∏–º
        if "size" not in user_data[message.chat.id]:
            user_data[message.chat.id]["state"] = "waiting_size"
            await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ä–∞–∑–º–µ—Ä (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ 0):")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        size = user_data[message.chat.id].get("size", "0")
        await message.answer(
            f"üí∏ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {rub} ‚ÇΩ\n"
            f"üîπ –°—Ç–æ–∏–º–æ—Å—Ç—å: ¬•{price} √ó {yuan_rate} ‚ÇΩ = {rub_no_fee} ‚ÇΩ\n"
            f"üîπ –ö–æ–º–∏—Å—Å–∏—è: {fixed_fee} ‚ÇΩ\n"
            f"üìè –†–∞–∑–º–µ—Ä: {size}\n\n"
            f"üöö –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
            f"600‚ÇΩ/–∫–≥ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞, –¥–∞–ª–µ–µ –ø–æ —Ç–∞—Ä–∏—Ñ—É CDEK/–ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏.\n"
            f"üì¶ –¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–∫–∞–∂–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä.",
            reply_markup=kb
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ —é–∞–Ω—è—Ö.")

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("state") == "waiting_size")
async def handle_size(message: types.Message):
    user_data[message.chat.id]["size"] = message.text
    user_data[message.chat.id]["state"] = "waiting_price"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("edit_"))
async def process_edit_callback(callback_query: types.CallbackQuery):
    action = callback_query.data
    chat_id = callback_query.message.chat.id

    if action == "edit_screenshot":
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(chat_id, "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω —Ç–æ–≤–∞—Ä–∞:")
        user_data[chat_id]["state"] = "waiting_screenshot"
    elif action == "edit_size":
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(chat_id, "–ü—Ä–∏—à–ª–∏—Ç–µ —Ä–∞–∑–º–µ—Ä (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî 0):")
        user_data[chat_id]["state"] = "waiting_size"
    elif action == "edit_price":
        await bot.answer_callback_query(callback_query.id)
        try:
            media = types.MediaGroup()
            media.attach_photo(InputFile("order_price_1.jpg"))
            media.attach_photo(InputFile("order_price_2.jpg"))
            media.attach_photo(InputFile("order_price_3.jpg"))
            await bot.send_media_group(chat_id, media)
        except Exception as e:
            logging.error(f"Error sending price images: {e}")
        await bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
        user_data[chat_id]["state"] = "waiting_price"

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("state") == "waiting_screenshot", content_types=types.ContentType.PHOTO)
async def handle_screenshot(message: types.Message):
    photos = message.photo
    if not photos:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å–∫—Ä–∏–Ω —Ç–æ–≤–∞—Ä–∞).")
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    user_data[message.chat.id]["screenshot_file_id"] = photos[-1].file_id
    user_data[message.chat.id]["state"] = "waiting_size"
    await message.answer("–°–∫—Ä–∏–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ä–∞–∑–º–µ—Ä (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî 0):")

@dp.callback_query_handler(lambda c: c.data == "confirm_order")
async def confirm_order(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    data = user_data.get(chat_id, {})
    if not data:
        await bot.answer_callback_query(callback_query.id, text="–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return

    size = data.get("size", "0")
    price = data.get("price", 0)
    fixed_fee = data.get("fixed_fee", 0)
    rub_no_fee = data.get("rub_no_fee", 0)
    total_rub = data.get("total_rub", 0)
    screenshot_file_id = data.get("screenshot_file_id")

    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/dadmaksi"))
    kb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="restart"))

    text = (
        f"üìã –ò—Ç–æ–≥–æ–≤—ã–π –∑–∞–∫–∞–∑:\n"
        f"üì∏ –¢–æ–≤–∞—Ä (—Å–∫—Ä–∏–Ω):\n"
    )
    if screenshot_file_id:
        await bot.send_photo(chat_id, screenshot_file_id)
    text += (
        f"üìè –†–∞–∑–º–µ—Ä: {size}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ¬•{price} √ó {yuan_rate} ‚ÇΩ = {rub_no_fee} ‚ÇΩ\n"
        f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {fixed_fee} ‚ÇΩ\n"
        f"üí≥ –ò—Ç–æ–≥–æ: {total_rub} ‚ÇΩ\n\n"
        f"üöö –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
        f"600‚ÇΩ/–∫–≥ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞, –¥–∞–ª–µ–µ –ø–æ —Ç–∞—Ä–∏—Ñ—É CDEK/–ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏.\n\n"
        f"–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
    )

    await bot.send_message(chat_id, text, reply_markup=kb)
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == "restart")
async def restart(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    user_data[chat_id] = {}
    await bot.answer_callback_query(callback_query.id)
    await send_start_photo(chat_id)

@dp.message_handler(lambda m: m.text == "üõç –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def start_order_process(message: types.Message):
    user_data[message.chat.id] = {"state": "waiting_screenshot_order"}
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω —Ç–æ–≤–∞—Ä–∞:")

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("state") == "waiting_screenshot_order", content_types=types.ContentType.PHOTO)
async def order_handle_screenshot(message: types.Message):
    photos = message.photo
    if not photos:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å–∫—Ä–∏–Ω —Ç–æ–≤–∞—Ä–∞).")
        return
    user_data[message.chat.id]["screenshot_file_id"] = photos[-1].file_id
    user_data[message.chat.id]["state"] = "waiting_size_order"
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ä–∞–∑–º–µ—Ä (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî 0):")

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("state") == "waiting_size_order")
async def order_handle_size(message: types.Message):
    user_data[message.chat.id]["size"] = message.text
    user_data[message.chat.id]["state"] = "waiting_price_order"
    try:
        media = types.MediaGroup()
        media.attach_photo(InputFile("order_price_1.jpg"))
        media.attach_photo(InputFile("order_price_2.jpg"))
        media.attach_photo(InputFile("order_price_3.jpg"))
        await bot.send_media_group(message.chat.id, media)
    except Exception as e:
        logging.error(f"Error sending price images: {e}")
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("state") == "waiting_price_order")
async def order_handle_price(message: types.Message):
    text = message.text.replace(",", ".")
    try:
        price = float(text)
        user_data[message.chat.id]["price"] = price
        fixed_fee = 0  # –ó–¥–µ—Å—å –ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        rub_no_fee = round(price * yuan_rate, 2)
        rub = round(rub_no_fee + fixed_fee, 2)
        user_data[message.chat.id]["fixed_fee"] = fixed_fee
        user_data[message.chat.id]["rub_no_fee"] = rub_no_fee
        user_data[message.chat.id]["total_rub"] = rub
        user_data[message.chat.id]["state"] = "order_done"

        kb = InlineKeyboardMarkup(row_width=1)
        kb.add(
            InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ", callback_data="restart_order"),
            InlineKeyboardButton("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ!", callback_data="confirm_order_order")
        )

        size = user_data[message.chat.id].get("size", "0")
        await message.answer(
            f"üì∏ –°–∫—Ä–∏–Ω —Ç–æ–≤–∞—Ä–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n"
            f"üìè –†–∞–∑–º–µ—Ä: {size}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö: ¬•{price}\n"
            f"üí∏ –ò—Ç–æ–≥ (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏): {rub_no_fee} ‚ÇΩ\n\n"
            f"–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=kb
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ —é–∞–Ω—è—Ö.")

@dp.callback_query_handler(lambda c: c.data == "restart_order")
async def restart_order(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    user_data[chat_id] = {"state": "waiting_screenshot_order"}
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(chat_id, "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω —Ç–æ–≤–∞—Ä–∞:")

@dp.callback_query_handler(lambda c: c.data == "confirm_order_order")
async def confirm_order_order(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    data = user_data.get(chat_id, {})
    if not data:
        await bot.answer_callback_query(callback_query.id, text="–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return

    screenshot_file_id = data.get("screenshot_file_id")
    size = data.get("size", "0")
    price = data.get("price", 0)
    rub_no_fee = data.get("rub_no_fee", 0)

    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/dadmaksi"))
    kb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="restart"))

    text = (
        f"üìã –ò—Ç–æ–≥–æ–≤—ã–π –∑–∞–∫–∞–∑:\n"
        f"üì∏ –¢–æ–≤–∞—Ä (—Å–∫—Ä–∏–Ω):\n"
    )
    if screenshot_file_id:
        await bot.send_photo(chat_id, screenshot_file_id)
    text += (
        f"üìè –†–∞–∑–º–µ—Ä: {size}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ¬•{price}\n"
        f"üí∏ –ò—Ç–æ–≥: {rub_no_fee} ‚ÇΩ\n\n"
        f"–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
    )

    await bot.send_message(chat_id, text, reply_markup=kb)
    await bot.answer_callback_query(callback_query.id)

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
