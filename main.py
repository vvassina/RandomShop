import logging
import os
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YUAN_RATE = float(os.getenv("YUAN_RATE", 11.5))

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

CATEGORY_FEES = {
    "–û–±—É–≤—å/–ö—É—Ä—Ç–∫–∏": 1000,
    "–î–∂–∏–Ω—Å—ã/–ö–æ—Ñ—Ç—ã": 800,
    "–®—Ç–∞–Ω—ã/–Æ–±–∫–∏/–ü–ª–∞—Ç—å—è": 600,
    "–§—É—Ç–±–æ–ª–∫–∏/–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": 600,
    "–ß–∞—Å—ã/–£–∫—Ä–∞—à–µ–Ω–∏—è": 1000,
    "–°—É–º–∫–∏/–†—é–∫–∑–∞–∫–∏": 900,
    "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ": 0
}

class OrderState(StatesGroup):
    waiting_for_photo = State()
    waiting_for_size = State()
    waiting_for_category = State()
    waiting_for_price = State()
    waiting_for_contact = State()
    confirm_order = State()
    
current_category = None
yuan_rate = float(os.getenv("YUAN_RATE", 11.5))  # –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è

user_orders = {}

def main_menu():
    return ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton("–ü–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ üí¥"),
        KeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üõç")
    )

@dp.message_handler(commands=["start"])
async def start(message: types.Message, state: FSMContext):
    await state.finish()
    try:
        with open("start.jpg", "rb") as photo:
            await message.answer_photo(
                photo,
                caption="–ü—Ä–∏–≤–µ—Ç!üëãüèº\n\n–Ø –ø–æ–º–æ–≥—É –í–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!",
                reply_markup=main_menu()
            )
    except:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç!üëãüèº –Ø –ø–æ–º–æ–≥—É –í–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!",
            reply_markup=main_menu()
        )

# --- –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ ---
@dp.message_handler(lambda m: m.text == "–ü–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ üí¥")
async def choose_category_for_price(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for cat in CATEGORY_FEES:
        markup.add(KeyboardButton(cat))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=markup)

@dp.message_handler(lambda message: message.text in CATEGORY_FEES)
async def input_price_yuan(message: types.Message, state: FSMContext):
    await state.update_data(selected_category=message.text)
    try:
        media = types.MediaGroup()
        for i in range(1, 4):
            media.attach_photo(types.InputFile(f"price_example_{i}.jpg"))
        await bot.send_media_group(message.chat.id, media)
    except:
        pass
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (¬•):")

@dp.message_handler(lambda m: m.text.replace(",", ".").replace("¬•", "").strip().replace(".", "").isdigit())
async def calculate_price(message: types.Message, state: FSMContext):
    data = await state.get_data()
    category = data.get("selected_category")
    if not category:
        return
    try:
        yuan = float(message.text.replace("¬•", "").replace(",", ".").strip())
        rub_no_fee = round(yuan * YUAN_RATE, 2)
        fee = CATEGORY_FEES[category]
        total = rub_no_fee + fee

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üõç", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")

        await message.answer(
            f"üí∏ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total} ‚ÇΩ\n\n"
            f"üîπ –°—Ç–æ–∏–º–æ—Å—Ç—å: ¬•{yuan} √ó {YUAN_RATE} ‚ÇΩ = {rub_no_fee} ‚ÇΩ\n"
            f"üîπ –ö–æ–º–∏—Å—Å–∏—è: {fee} ‚ÇΩ\n\n"
            f"üöö –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
            f"600‚ÇΩ/–∫–≥ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞, –¥–∞–ª–µ–µ –ø–æ —Ç–∞—Ä–∏—Ñ—É CDEK/–ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏.\n"
            f"üì¶ –¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–∫–∞–∂–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –ø—Ä–∏–±—É–¥–µ—Ç –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫!",
            reply_markup=markup
        )
    except Exception as e:
        logging.error(e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
class OrderState(StatesGroup):
    waiting_for_photo = State()
    waiting_for_size = State()
    waiting_for_category = State()
    waiting_for_price = State()
    waiting_for_contact = State()
    confirm_order = State()

user_orders = {}

@dp.message_handler(lambda m: m.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üõç", state="*")
async def start_order(message: types.Message, state: FSMContext):
    await state.update_data(current_order=[], editing_index=None)
    await message.answer("–®–∞–≥ 1Ô∏è‚É£: –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–≤–∞—Ä–∞.")
    await OrderState.waiting_for_photo.set()

@dp.message_handler(content_types=types.ContentType.PHOTO, state=OrderState.waiting_for_photo)
async def handle_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)
    await message.answer("–®–∞–≥ 2Ô∏è‚É£: –ü—Ä–∏—à–ª–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 42 –∏–ª–∏ M).")
    await OrderState.waiting_for_size.set()

@dp.message_handler(state=OrderState.waiting_for_size)
async def handle_size(message: types.Message, state: FSMContext):
    await state.update_data(size=message.text.strip())
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for cat in CATEGORY_FEES:
        markup.add(KeyboardButton(cat))
    await message.answer("–®–∞–≥ 3Ô∏è‚É£: –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=markup)
    await OrderState.waiting_for_category.set()

@dp.message_handler(lambda m: m.text in CATEGORY_FEES, state=OrderState.waiting_for_category)
async def handle_category(message: types.Message, state: FSMContext):
    await state.update_data(category=message.text)
    await message.answer("–®–∞–≥ 4Ô∏è‚É£: –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (¬•).")
    await OrderState.waiting_for_price.set()

@dp.message_handler(state=OrderState.waiting_for_price)
async def handle_price(message: types.Message, state: FSMContext):
    text = message.text.replace("¬•", "").replace(",", ".").strip()
    if not text.replace('.', '').isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —é–∞–Ω—è—Ö.")
        return
    await state.update_data(yuan=float(text))
    await message.answer("–®–∞–≥ 5Ô∏è‚É£: –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ Telegram –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ üìû")
    await OrderState.waiting_for_contact.set()

@dp.message_handler(state=OrderState.waiting_for_contact)
async def handle_contact(message: types.Message, state: FSMContext):
    contact = message.text.strip()
    data = await state.get_data()
    user_id = message.from_user.id

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫ –∑–∞–∫–∞–∑—É
    item = {
        "photo": data["photo"],
        "size": data["size"],
        "category": data["category"],
        "yuan": data["yuan"],
        "contact": contact
    }

    user_orders.setdefault(user_id, []).append(item)
    await state.update_data(current_order=user_orders[user_id])

    await show_order_summary(message, state)
    await OrderState.confirm_order.set()

      from aiogram.types import InputMediaPhoto

async def show_order_summary(message: types.Message, state: FSMContext):
    data = await state.get_data()
    items = data.get("current_order", [])
    user_id = message.from_user.id

    media = types.MediaGroup()
    for item in items:
        media.attach_photo(item["photo"])
    try:
        await bot.send_media_group(user_id, media)
    except:
        pass

    summary = f"–í–∞—à –∑–∞–∫–∞–∑:\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(items)}\n\n"
    total_price = 0

    for idx, item in enumerate(items, start=1):
        category = item["category"]
        yuan = item["yuan"]
        rub_no_fee = round(yuan * YUAN_RATE, 2)
        fee = CATEGORY_FEES.get(category, 0)
        total = rub_no_fee + fee
        total_price += total

        summary += (
            f"üì¶ –¢–æ–≤–∞—Ä {idx} ‚¨á\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"–†–∞–∑–º–µ—Ä: {item['size']}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: ¬•{yuan} √ó {YUAN_RATE} ‚ÇΩ + {fee} ‚ÇΩ = {total} ‚ÇΩ\n\n"
        )

    summary += (
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_price} ‚ÇΩ\n\n"
        f"üöö –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
        f"600‚ÇΩ/–∫–≥ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞, –¥–∞–ª–µ–µ –ø–æ —Ç–∞—Ä–∏—Ñ—É CDEK/–ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏.\n"
        f"üì¶ –¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–∫–∞–∂–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –ø—Ä–∏–±—É–¥–µ—Ç –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫!"
    )

    buttons = [
        [KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ"), KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä")],
        [KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö")],
        [KeyboardButton("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ")]
    ]
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=buttons)
    await message.answer(summary, reply_markup=markup)

@dp.message_handler(lambda m: m.text == "‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", state=OrderState.confirm_order)
async def after_confirmation(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!üî•")
    markup.add("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–∫–∞–∑")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@dp.message_handler(lambda m: m.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–∫–∞–∑", state=OrderState.confirm_order)
async def add_more_items(message: types.Message, state: FSMContext):
    await message.answer("–®–∞–≥ 1Ô∏è‚É£: –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–≤–∞—Ä–∞.")
    await OrderState.waiting_for_photo.set()

@dp.message_handler(lambda m: m.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!üî•", state=OrderState.confirm_order)
async def ready_to_send(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É", "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@dp.message_handler(lambda m: m.text == "üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É", state=OrderState.confirm_order)
async def send_to_manager(message: types.Message, state: FSMContext):
    data = await state.get_data()
    items = data.get("current_order", [])
    contact = items[-1]["contact"]
    total_text = f"üõç –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {contact}:\n"

    total_price = 0
    for idx, item in enumerate(items, start=1):
        category = item["category"]
        size = item["size"]
        yuan = item["yuan"]
        rub_no_fee = round(yuan * YUAN_RATE, 2)
        fee = CATEGORY_FEES.get(category, 0)
        rub = rub_no_fee + fee
        total_price += rub

        total_text += (
            f"\nüì¶ –¢–æ–≤–∞—Ä {idx}:\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"–†–∞–∑–º–µ—Ä: {size}\n"
            f"–¶–µ–Ω–∞: ¬•{yuan} ‚Üí {rub_no_fee} + {fee} = {rub} ‚ÇΩ"
        )

    total_text += f"\n\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_price} ‚ÇΩ\n–ö–æ–Ω—Ç–∞–∫—Ç: {contact}"

    media = types.MediaGroup()
    for item in items:
        media.attach_photo(item["photo"])
    try:
        await bot.send_media_group(chat_id='-1002687753071', media=media)
        await bot.send_message(chat_id='-1002687753071', text=total_text)
    except Exception as e:
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await message.answer("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ, —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏! –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑ ‚ù§")

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=markup)
    await state.finish()
@dp.message_handler(lambda m: m.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", state=OrderState.confirm_order)
async def edit_photo(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")
    await OrderState.waiting_for_photo.set()

@dp.message_handler(lambda m: m.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä", state=OrderState.confirm_order)
async def edit_size(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:")
    await OrderState.waiting_for_size.set()

@dp.message_handler(lambda m: m.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö", state=OrderState.confirm_order)
async def edit_price(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö:")
    await OrderState.waiting_for_price.set()

@dp.message_handler(lambda m: m.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", state=OrderState.confirm_order)
async def back_after_confirm(message: types.Message, state: FSMContext):
    await show_order_summary(message, state)

@dp.message_handler(lambda m: m.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", state="*")
async def go_to_start(message: types.Message, state: FSMContext):
    await state.finish()
    await start(message)

# --- Web-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ---
async def handle(request):
    return web.Response(text="Bot is running")

async def start_webserver():
    app = web.Application()
    app.add_routes([web.get('/', handle)])
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.environ.get("PORT", 8000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    logging.info(f"Webserver started on port {port}")

async def main():
    await start_webserver()
    await dp.start_polling()

if __name__ == '__main__':
    asyncio.run(main())
