import logging
import os
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto, MediaGroup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
YUAN_RATE = float(os.getenv("YUAN_RATE", 11.5))

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

CATEGORY_FEES = {
    "–û–±—É–≤—å/–ö—É—Ä—Ç–∫–∏": 1000,
    "–î–∂–∏–Ω—Å—ã/–ö–æ—Ñ—Ç—ã": 800,
    "–®—Ç–∞–Ω—ã/–Æ–±–∫–∏/–ü–ª–∞—Ç—å—è": 600,
    "–§—É—Ç–±–æ–ª–∫–∏/–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": 600,
    "–ß–∞—Å—ã/–£–∫—Ä–∞—à–µ–Ω–∏—è": 1000,
    "–°—É–º–∫–∏/–†—é–∫–∑–∞–∫–∏": 900,
    "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ": 0
}

class OrderState(StatesGroup):
    waiting_for_photo = State()
    waiting_for_size = State()
    waiting_for_category = State()
    waiting_for_price = State()
    waiting_for_contact = State()
    confirm_order = State()

def main_menu():
    return ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton("–ü–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ üí¥"),
        KeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üõç")
    )

@dp.message_handler(commands=["start"])
async def start(message: types.Message, state: FSMContext):
    await state.finish()
    try:
        with open("start.jpg", "rb") as photo:
            await message.answer_photo(
                photo,
                caption="–ü—Ä–∏–≤–µ—Ç!üëãüèº\n\n–Ø –ø–æ–º–æ–≥—É –í–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!",
                reply_markup=main_menu()
            )
    except:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç!üëãüèº –Ø –ø–æ–º–æ–≥—É –í–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!",
            reply_markup=main_menu()
        )

# --- –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ ---
@dp.message_handler(lambda m: m.text == "–ü–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ üí¥")
async def choose_category_for_price(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for cat in CATEGORY_FEES:
        markup.add(KeyboardButton(cat))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=markup)

@dp.message_handler(lambda message: message.text in CATEGORY_FEES)
async def input_price_yuan(message: types.Message, state: FSMContext):
    await state.update_data(selected_category=message.text)
    try:
        media = MediaGroup()
        for i in range(1, 4):
            media.attach_photo(types.InputFile(f"price_example_{i}.jpg"))
        await bot.send_media_group(message.chat.id, media)
    except:
        pass
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (¬•):")

@dp.message_handler(lambda m: m.text.replace(",", ".").replace("¬•", "").strip().replace(".", "").isdigit())
async def calculate_price(message: types.Message, state: FSMContext):
    data = await state.get_data()
    category = data.get("selected_category")
    if not category:
        return
    try:
        yuan = float(message.text.replace("¬•", "").replace(",", ".").strip())
        rub_no_fee = round(yuan * YUAN_RATE, 2)
        fee = CATEGORY_FEES[category]
        total = rub_no_fee + fee

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üõç", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")

        await message.answer(
            f"üí∏ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total} ‚ÇΩ\n\n"
            f"üîπ –°—Ç–æ–∏–º–æ—Å—Ç—å: ¬•{yuan} √ó {YUAN_RATE} ‚ÇΩ = {rub_no_fee} ‚ÇΩ\n"
            f"üîπ –ö–æ–º–∏—Å—Å–∏—è: {fee} ‚ÇΩ\n\n"
            f"üöö –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
            f"600‚ÇΩ/–∫–≥ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞, –¥–∞–ª–µ–µ –ø–æ —Ç–∞—Ä–∏—Ñ—É CDEK/–ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏.\n"
            f"üì¶ –¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–∫–∞–∂–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –ø—Ä–∏–±—É–¥–µ—Ç –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫!",
            reply_markup=markup
        )
    except Exception as e:
        logging.error(e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message_handler(lambda m: m.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üõç", state="*")
async def start_order(message: types.Message, state: FSMContext):
    await state.update_data(items=[], edit_index=None)
    await message.answer("–®–∞–≥ 1Ô∏è‚É£: –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–≤–∞—Ä–∞.")
    await OrderState.waiting_for_photo.set()

@dp.message_handler(content_types=types.ContentType.PHOTO, state=OrderState.waiting_for_photo)
async def handle_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    items = data.get("items", [])
    edit_index = data.get("edit_index")

    photo_file_id = message.photo[-1].file_id

    if edit_index is not None and 0 <= edit_index < len(items):
        items[edit_index]["photo"] = photo_file_id
    else:
        items.append({
            "photo": photo_file_id,
            "size": None,
            "category": None,
            "yuan": None,
        })

    await state.update_data(items=items, edit_index=None)
    await message.answer("–®–∞–≥ 2Ô∏è‚É£: –ü—Ä–∏—à–ª–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 42 –∏–ª–∏ M).")
    await OrderState.waiting_for_size.set()

@dp.message_handler(state=OrderState.waiting_for_size)
async def handle_size(message: types.Message, state: FSMContext):
    data = await state.get_data()
    items = data.get("items", [])
    edit_index = data.get("edit_index")

    size = message.text.strip()

    if edit_index is not None and 0 <= edit_index < len(items):
        items[edit_index]["size"] = size
    elif items:
        items[-1]["size"] = size
    else:
        items.append({
            "photo": None,
            "size": size,
            "category": None,
            "yuan": None,
        })

    await state.update_data(items=items, edit_index=None)
    
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for cat in CATEGORY_FEES:
        markup.add(KeyboardButton(cat))
    await message.answer("–®–∞–≥ 3Ô∏è‚É£: –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=markup)
    await OrderState.waiting_for_category.set()
    
@dp.message_handler(lambda m: m.text in CATEGORY_FEES, state=OrderState.waiting_for_category)
async def handle_category(message: types.Message, state: FSMContext):
    data = await state.get_data()
    items = data.get("items", [])
    edit_index = data.get("edit_index")

    category = message.text

    if edit_index is not None and 0 <= edit_index < len(items):
        items[edit_index]["category"] = category
    elif items:
        items[-1]["category"] = category
    else:
        items.append({
            "photo": None,
            "size": None,
            "category": category,
            "yuan": None,
        })

    await state.update_data(items=items, edit_index=None)
    await message.answer("–®–∞–≥ 4Ô∏è‚É£: –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (¬•).")
    await OrderState.waiting_for_price.set()
    
@dp.message_handler(state=OrderState.waiting_for_price)
async def handle_price(message: types.Message, state: FSMContext):
    text = message.text.replace("¬•", "").replace(",", ".").strip()
    if not text.replace('.', '').isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —é–∞–Ω—è—Ö.")
        return

    data = await state.get_data()
    items = data.get("items", [])
    edit_index = data.get("edit_index")

    price_yuan = float(text)

    if edit_index is not None and 0 <= edit_index < len(items):
        items[edit_index]["yuan"] = price_yuan
    elif items:
        items[-1]["yuan"] = price_yuan
    else:
        items.append({
            "photo": None,
            "size": None,
            "category": None,
            "yuan": price_yuan,
        })

    await state.update_data(items=items, edit_index=None)
    await message.answer("–®–∞–≥ 5Ô∏è‚É£: –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ Telegram –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ üìû")
    await OrderState.waiting_for_contact.set()

@dp.message_handler(state=OrderState.waiting_for_contact)
async def handle_contact(message: types.Message, state: FSMContext):
    contact = message.text.strip()
    data = await state.get_data()
    items = data.get("items", [])
    
    if not items:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.finish()
        return
    
    await state.update_data(contact=contact)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    msg_lines = [f"–í–∞—à –∑–∞–∫–∞–∑:\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(items)}"]
    total_rub = 0
    
    for i, item in enumerate(items, 1):
        cat_fee = CATEGORY_FEES.get(item.get("category"), 0)
        price_rub = round(item.get("yuan", 0) * YUAN_RATE + cat_fee, 2)
        total_rub += price_rub
        msg_lines.append(
            f"\n–¢–æ–≤–∞—Ä {i}‚¨á\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.get('category')}\n"
            f"–†–∞–∑–º–µ—Ä: {item.get('size')}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price_rub} ‚ÇΩ (¬•{item.get('yuan')})"
        )
    msg_lines.append(f"\n–û–±—â–∞—è —Å—É–º–º–∞: {total_rub} ‚ÇΩ")
    msg_lines.append(f"–ö–æ–Ω—Ç–∞–∫—Ç: {contact}")
    
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É")
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
    
    await message.answer("\n".join(msg_lines), reply_markup=markup)
    await OrderState.confirm_order.set()

@dp.message_handler(lambda m: m.text == "üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É", state=OrderState.confirm_order)
async def send_to_manager(message: types.Message, state: FSMContext):
    data = await state.get_data()
    items = data.get("items", [])
    contact = data.get("contact", "–Ω–µ —É–∫–∞–∑–∞–Ω")

    total_text = f"üõç –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {contact}:\n"
    total_price = 0
    media = MediaGroup()

    for idx, item in enumerate(items, start=1):
        category = item.get("category", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        size = item.get("size", "–Ω–µ —É–∫–∞–∑–∞–Ω")
        yuan = item.get("yuan", 0)
        rub_no_fee = round(yuan * YUAN_RATE, 2)
        fee = CATEGORY_FEES.get(category, 0)
        rub = rub_no_fee + fee
        total_price += rub

        total_text += (
            f"\nüì¶ –¢–æ–≤–∞—Ä {idx}:\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"–†–∞–∑–º–µ—Ä: {size}\n"
            f"–¶–µ–Ω–∞: ¬•{yuan} ‚Üí {rub_no_fee} + {fee} = {rub} ‚ÇΩ"
        )

        if item.get("photo"):
            media.attach_photo(item["photo"])

    total_text += f"\n\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_price} ‚ÇΩ\n–ö–æ–Ω—Ç–∞–∫—Ç: {contact}"

    manager_chat_id = -1002687753071  # –¢–≤–æ–π ID –≥—Ä—É–ø–ø—ã

    try:
        if media.media:
            await bot.send_media_group(chat_id=manager_chat_id, media=media)
        await bot.send_message(chat_id=manager_chat_id, text=total_text)
    except Exception as e:
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await message.answer("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ, —Å–∫–æ—Ä–æ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏! –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑ ‚ù§")

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=markup)
    await state.finish()

@dp.message_handler(lambda m: m.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", state="*")
async def back_to_start(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp)
