import logging
import os
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardButton, InlineKeyboardMarkup,
    InputMediaPhoto
)
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)

CATEGORY_FEES = {
    "–û–±—É–≤—å/–ö—É—Ä—Ç–∫–∏": 1000,
    "–î–∂–∏–Ω—Å—ã/–ö–æ—Ñ—Ç—ã": 800,
    "–®—Ç–∞–Ω—ã/–Æ–±–∫–∏/–ü–ª–∞—Ç—å—è": 600,
    "–§—É—Ç–±–æ–ª–∫–∏/–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": 600,
    "–ß–∞—Å—ã/–£–∫—Ä–∞—à–µ–Ω–∏—è": 1000,
    "–°—É–º–∫–∏/–†—é–∫–∑–∞–∫–∏": 900,
    "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ": 0
}

yuan_rate = float(os.getenv("YUAN_RATE", 11.5))

# FSM states
class OrderFSM(StatesGroup):
    waiting_for_photo = State()
    waiting_for_size = State()
    waiting_for_category = State()
    waiting_for_price = State()
    waiting_for_price_photos = State()
    confirming_order = State()

user_orders = {}

def get_main_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ü–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ üí¥")
    kb.add("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üõç")
    return kb

def get_category_keyboard():
    return ReplyKeyboardMarkup(resize_keyboard=True).add(*[KeyboardButton(cat) for cat in CATEGORY_FEES])

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    user_orders[message.chat.id] = []
    try:
        with open("start.jpg", "rb") as photo:
            await bot.send_photo(
                message.chat.id, photo,
                caption="–ü—Ä–∏–≤–µ—Ç!üëãüèº\n\n–Ø –ø–æ–º–æ–≥—É –í–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!",
                reply_markup=get_main_keyboard()
            )
    except:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∑–∞–∫–∞–∑–æ–º.", reply_markup=get_main_keyboard())

@dp.message_handler(lambda m: m.text == "–ü–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ üí¥")
async def price_calc_intro(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞:", reply_markup=get_category_keyboard())

@dp.message_handler(lambda message: message.text in CATEGORY_FEES)
async def handle_category_calc(message: types.Message):
    category = message.text
    if category == "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ":
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me/dadmaksi"))
        await message.answer("–¢–∞–∫–æ–µ —Å—á–∏—Ç–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É üòä", reply_markup=kb)
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö (¬•):")
    dp.register_message_handler(lambda m: True, lambda m: True, content_types=types.ContentTypes.TEXT)

@dp.message_handler(lambda m: m.text.replace(",", "").replace(".", "").isdigit())
async def calc_result(message: types.Message):
    yuan = float(message.text.replace(",", "."))
    category = None
    for cat in CATEGORY_FEES:
        if cat in message.text:
            category = cat
            break
    if not category:
        category = "–§—É—Ç–±–æ–ª–∫–∏/–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"  # default

    fee = CATEGORY_FEES[category]
    base = round(yuan * yuan_rate, 2)
    total = round(base + fee, 2)

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!üî•", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")

    await message.answer(
        f"üí∏ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total} ‚ÇΩ\n\n"
        f"üîπ –°—Ç–æ–∏–º–æ—Å—Ç—å: ¬•{yuan} √ó {yuan_rate} ‚ÇΩ = {base} ‚ÇΩ\n"
        f"üîπ –ö–æ–º–∏—Å—Å–∏—è: {fee} ‚ÇΩ\n\n"
        f"üöö –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
        f"600‚ÇΩ/–∫–≥ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞, –¥–∞–ª–µ–µ –ø–æ —Ç–∞—Ä–∏—Ñ—É CDEK/–ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏.",
        reply_markup=markup
    )

@dp.message_handler(lambda m: m.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!üî•")
@dp.message_handler(lambda m: m.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üõç")
async def start_order(message: types.Message):
    await message.answer("–®–∞–≥ 1: –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–≤–∞—Ä–∞ üñº")
    await OrderFSM.waiting_for_photo.set()

@dp.message_handler(content_types=types.ContentTypes.PHOTO, state=OrderFSM.waiting_for_photo)
async def receive_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    await message.answer("–®–∞–≥ 2: –ü—Ä–∏—à–ª–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, L –∏–ª–∏ 42)")
    await OrderFSM.waiting_for_size.set()

@dp.message_handler(state=OrderFSM.waiting_for_size)
async def receive_size(message: types.Message, state: FSMContext):
    await state.update_data(size=message.text)
    await message.answer("–®–∞–≥ 3: –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞", reply_markup=get_category_keyboard())
    await OrderFSM.waiting_for_category.set()

@dp.message_handler(state=OrderFSM.waiting_for_category)
async def receive_category(message: types.Message, state: FSMContext):
    if message.text not in CATEGORY_FEES:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é.")
        return
    await state.update_data(category=message.text)
    await message.answer("–®–∞–≥ 4: –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (¬•):")
    await OrderFSM.waiting_for_price.set()

@dp.message_handler(state=OrderFSM.waiting_for_price)
async def receive_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text.replace(",", "."))
        await state.update_data(price=price)
        await message.answer("–®–∞–≥ 5: –ü—Ä–∏—à–ª–∏—Ç–µ 3 —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–ø–æ –æ–¥–Ω–æ–º—É)")
        await OrderFSM.waiting_for_price_photos.set()
        await state.update_data(price_photos=[])
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.")

@dp.message_handler(content_types=types.ContentTypes.PHOTO, state=OrderFSM.waiting_for_price_photos)
async def receive_price_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("price_photos", [])
    photos.append(message.photo[-1].file_id)

    await state.update_data(price_photos=photos)

    if len(photos) == 3:
        await finalize_order(message, state)
        await OrderFSM.confirming_order.set()
    else:
        await message.answer(f"–§–æ—Ç–æ {len(photos)} –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å {3 - len(photos)}.")

async def finalize_order(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photo_id = data['photo']
    size = data['size']
    category = data['category']
    price = data['price']
    photos = data['price_photos']

    fee = CATEGORY_FEES.get(category, 0)
    total = round(price * yuan_rate + fee, 2)

    user_orders.setdefault(message.chat.id, []).append({
        "category": category,
        "size": size,
        "price": price,
        "photos": photos,
        "total": total
    })

    count = len(user_orders[message.chat.id])
    summary = f"–í–∞—à –∑–∞–∫–∞–∑:\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {count}"

    for idx, item in enumerate(user_orders[message.chat.id], 1):
        summary += f"\n\n–¢–æ–≤–∞—Ä {idx} ‚¨á\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item['category']}\n–†–∞–∑–º–µ—Ä: {item['size']}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {item['total']} ‚ÇΩ"

    summary += "\n\nüöö –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏: 600‚ÇΩ/–∫–≥ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞, –¥–∞–ª–µ–µ –ø–æ —Ç–∞—Ä–∏—Ñ—É CDEK/–ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏."

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä", "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö", "‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ")

    await message.answer(summary, reply_markup=kb)

@dp.message_handler(lambda m: m.text == "‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", state=OrderFSM.confirming_order)
async def confirm_order(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!üî•")
    kb.add("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–∫–∞–∑")
    kb.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?üëá", reply_markup=kb)

@dp.message_handler(lambda m: m.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!üî•", state="*")
async def finish_order(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–ú–µ–Ω–µ–¥–∂–µ—Ä üë§", request_contact=False))
    kb.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
    await message.answer("–ü–µ—Ä–µ—à–ª–∏—Ç–µ –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É üëá", reply_markup=kb)

@dp.message_handler(lambda m: m.text == "–ú–µ–Ω–µ–¥–∂–µ—Ä üë§")
async def to_manager(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÅ")
    await message.answer("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: https://t.me/dadmaksi", reply_markup=kb)

@dp.message_handler(lambda m: m.text == "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üîÅ")
async def restart_order(message: types.Message, state: FSMContext):
    await state.finish()
    user_orders[message.chat.id] = []
    await start_handler(message)

@dp.message_handler(lambda m: m.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–∫–∞–∑")
async def add_more(message: types.Message):
    await start_order(message)

@dp.message_handler(lambda m: m.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
async def back_to_confirm(message: types.Message, state: FSMContext):
    await confirm_order(message, state)

# Web server for Render
async def handle(request):
    return web.Response(text="Bot is running")

async def start_webserver():
    app = web.Application()
    app.add_routes([web.get("/", handle)])
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.environ.get("PORT", 8000))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

async def main():
    await start_webserver()
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())
