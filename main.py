import logging
import os
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, InputFile, MediaGroup
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ (–≤ —Ä—É–±–ª—è—Ö)
CATEGORY_FEES = {
    "–û–±—É–≤—å/–ö—É—Ä—Ç–∫–∏": 1000,
    "–î–∂–∏–Ω—Å—ã/–ö–æ—Ñ—Ç—ã": 800,
    "–®—Ç–∞–Ω—ã/–Æ–±–∫–∏/–ü–ª–∞—Ç—å—è": 600,
    "–§—É—Ç–±–æ–ª–∫–∏/–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": 600,
    "–ß–∞—Å—ã/–£–∫—Ä–∞—à–µ–Ω–∏—è": 1000,
    "–°—É–º–∫–∏/–†—é–∫–∑–∞–∫–∏": 900,
    "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ": 0
}

yuan_rate = float(os.getenv("YUAN_RATE", 11.5))  # –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è

class OrderForm(StatesGroup):
    waiting_for_screenshot = State()
    waiting_for_size = State()
    waiting_for_price = State()
    confirmation = State()

def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞"))
    markup.add(KeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"))
    return markup

def order_confirmation_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω", callback_data="edit_screenshot"),
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä", callback_data="edit_size"),
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="edit_price")
    )
    kb.add(InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me/dadmaksi"))
    kb.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="restart"))
    return kb

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    try:
        with open("start.jpg", "rb") as photo:
            await bot.send_photo(
                message.chat.id,
                photo,
                caption="–ü—Ä–∏–≤–µ—Ç!üëãüèº\n\n–Ø –ø–æ–º–æ–≥—É –í–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!",
                reply_markup=main_menu()
            )
    except Exception as e:
        logging.error(f"Error sending start photo: {e}")
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –í–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!", reply_markup=main_menu())

@dp.message_handler(lambda message: message.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞")
async def start_calculation(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True).add(*[KeyboardButton(cat) for cat in CATEGORY_FEES])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=markup)

@dp.message_handler(lambda message: message.text in CATEGORY_FEES)
async def handle_category(message: types.Message):
    category = message.text

    if category == "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ":
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me/dadmaksi"))
        await message.answer("–¢–∞–∫–æ–µ —Å—á–∏—Ç–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É üòä", reply_markup=kb)
        return

    state = dp.current_state(user=message.from_user.id)
    await state.update_data(category=category)

    media = MediaGroup()
    media.attach_photo(InputFile("price_example_1.jpg"))
    media.attach_photo(InputFile("price_example_2.jpg"))
    media.attach_photo(InputFile("price_example_3.jpg"))
    await bot.send_media_group(message.chat.id, media)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö (¬•):")

@dp.message_handler(lambda message: True)
async def calculate_price(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    data = await state.get_data()
    category = data.get("category")

    if not category:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω—é.", reply_markup=main_menu())
        return

    text = message.text.replace(",", ".")
    try:
        yuan = float(text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ —é–∞–Ω—è—Ö.")
        return

    fixed_fee = CATEGORY_FEES[category]
    rub_no_fee = round(yuan * yuan_rate, 2)
    rub = round(rub_no_fee + fixed_fee, 2)

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!üî•", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")

    await message.answer(
        f"üí∏ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {rub} ‚ÇΩ\n\n"
        f"üîπ –°—Ç–æ–∏–º–æ—Å—Ç—å: ¬•{yuan} √ó {yuan_rate} ‚ÇΩ = {rub_no_fee} ‚ÇΩ\n"
        f"üîπ –ö–æ–º–∏—Å—Å–∏—è: {fixed_fee} ‚ÇΩ\n\n"
        f"üöö –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
        f"600‚ÇΩ/–∫–≥ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞, –¥–∞–ª–µ–µ –ø–æ —Ç–∞—Ä–∏—Ñ—É CDEK/–ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏.\n\n"
        f"üì¶ –¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–∫–∞–∂–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –ø—Ä–∏–±—É–¥–µ—Ç –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫!",
        reply_markup=markup
    )

@dp.message_handler(lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
async def return_to_start(message: types.Message):
    await cmd_start(message)

@dp.message_handler(lambda message: message.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def start_order(message: types.Message):
    await OrderForm.waiting_for_screenshot.set()
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω —Ç–æ–≤–∞—Ä–∞", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(state=OrderForm.waiting_for_screenshot, content_types=types.ContentType.PHOTO)
async def process_screenshot(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    await state.update_data(screenshot_file_id=photo.file_id)
    await OrderForm.next()
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä (–µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä–∞ –Ω–µ—Ç ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ 0)")

@dp.message_handler(state=OrderForm.waiting_for_screenshot)
async def process_wrong_screenshot(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–æ—Ç–æ.")

@dp.message_handler(state=OrderForm.waiting_for_size)
async def process_size(message: types.Message, state: FSMContext):
    size = message.text.strip()
    await state.update_data(size=size)
    await OrderForm.next()

    media = MediaGroup()
    media.attach_photo(InputFile("price_example_1.jpg"))
    media.attach_photo(InputFile("price_example_2.jpg"))
    media.attach_photo(InputFile("price_example_3.jpg"))
    await bot.send_media_group(message.chat.id, media)

    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (¬•):")

@dp.message_handler(state=OrderForm.waiting_for_price)
async def process_price(message: types.Message, state: FSMContext):
    text = message.text.replace(",", ".")
    try:
        price = float(text)
        if price < 0:
            raise ValueError()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏.")
        return

    await state.update_data(price=price)
    data = await state.get_data()

    caption = (
        f"üõç –í–∞—à –∑–∞–∫–∞–∑:\n\n"
        f"üì∑ –°–∫—Ä–∏–Ω: –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω\n"
        f"üìè –†–∞–∑–º–µ—Ä: {data.get('size')}\n"
        f"üí¥ –°—Ç–æ–∏–º–æ—Å—Ç—å: ¬•{price}\n\n"
        f"–ü–µ—Ä–µ—à–ª–∏—Ç–µ –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É."
    )

    await OrderForm.confirmation.set()
    await bot.send_photo(
        message.chat.id,
        photo=data['screenshot_file_id'],
        caption=caption,
        reply_markup=order_confirmation_kb()
    )

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("edit_"), state=OrderForm.confirmation)
async def process_edit_callback(callback_query: types.CallbackQuery, state: FSMContext):
    action = callback_query.data

    if action == "edit_screenshot":
        await OrderForm.waiting_for_screenshot.set()
        await bot.send_message(callback_query.from_user.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω —Ç–æ–≤–∞—Ä–∞")
    elif action == "edit_size":
        await OrderForm.waiting_for_size.set()
        await bot.send_message(callback_query.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ 0)")
    elif action == "edit_price":
        await OrderForm.waiting_for_price.set()

        media = MediaGroup()
        media.attach_photo(InputFile("price_example_1.jpg"))
        media.attach_photo(InputFile("price_example_2.jpg"))
        media.attach_photo(InputFile("price_example_3.jpg"))
        await bot.send_media_group(callback_query.from_user.id, media)

        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö (¬•):")
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "restart", state='*')
async def restart_order(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await cmd_start(await bot.get_chat(callback_query.from_user.id))
    await callback_query.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ")

# --- –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ---
async def handle(request):
    return web.Response(text="Bot is running")

async def start_webserver():
    app = web.Application()
    app.add_routes([web.get('/', handle)])
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.environ.get("PORT", 8000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    logging.info(f"Webserver started on port {port}")

async def main():
    await start_webserver()
    await dp.start_polling()

if __name__ == '__main__':
    asyncio.run(main())
