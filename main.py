import logging
import os
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardButton, InlineKeyboardMarkup,
    InputMediaPhoto
)
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)

# –ö—É—Ä—Å —é–∞–Ω—è
yuan_rate = float(os.getenv("YUAN_RATE", 11.5))

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–æ–º–∏—Å—Å–∏–∏ (–¥–ª—è "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å üí¥")
CATEGORY_FEES = {
    "–û–±—É–≤—å/–ö—É—Ä—Ç–∫–∏": 1000,
    "–î–∂–∏–Ω—Å—ã/–ö–æ—Ñ—Ç—ã": 800,
    "–®—Ç–∞–Ω—ã/–Æ–±–∫–∏/–ü–ª–∞—Ç—å—è": 600,
    "–§—É—Ç–±–æ–ª–∫–∏/–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": 600,
    "–ß–∞—Å—ã/–£–∫—Ä–∞—à–µ–Ω–∏—è": 1000,
    "–°—É–º–∫–∏/–†—é–∫–∑–∞–∫–∏": 900,
    "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ": 0
}

# FSM –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (—Ñ–æ—Ç–æ, —Ä–∞–∑–º–µ—Ä, —Ü–µ–Ω–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
class OrderStates(StatesGroup):
    waiting_screenshot = State()
    waiting_size = State()
    waiting_price = State()
    waiting_confirmation = State()

# FSM –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Ü–µ–Ω–∞, –∏—Ç–æ–≥)
class CalcStates(StatesGroup):
    waiting_category = State()
    waiting_price = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ üí¥"))
    kb.add(KeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üõç"))
    return kb

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
def categories_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for cat in CATEGORY_FEES.keys():
        kb.add(KeyboardButton(cat))
    return kb

# –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–∏–∫)
def edit_order_markup():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω", callback_data="edit_screenshot"),
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä", callback_data="edit_size"),
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="edit_price"),
        InlineKeyboardButton("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm_order")
    )
    return kb

# –ö–Ω–æ–ø–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
def manager_button():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me/dadmaksi"))
    return kb

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    try:
        with open("start.jpg", "rb") as photo:
            await bot.send_photo(
                message.chat.id,
                photo,
                caption="–ü—Ä–∏–≤–µ—Ç! üëãüèº\n\n–Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.",
                reply_markup=main_menu()
            )
    except Exception as e:
        logging.error(f"Error sending start photo: {e}")
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
@dp.message_handler(lambda m: m.text in ["–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ üí¥", "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üõç"])
async def handle_main_menu(message: types.Message, state: FSMContext):
    if message.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ üí¥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=categories_menu())
        await CalcStates.waiting_category.set()
    else:
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω —Ç–æ–≤–∞—Ä–∞:")
        await OrderStates.waiting_screenshot.set()

# === –í–µ—Ç–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ ===

@dp.message_handler(state=CalcStates.waiting_category)
async def calc_category_chosen(message: types.Message, state: FSMContext):
    category = message.text
    if category not in CATEGORY_FEES:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(category=category)
    if category == "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ":
        await message.answer(
            "–¢–∞–∫–æ–µ —Å—á–∏—Ç–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É üòä",
            reply_markup=manager_button()
        )
        await state.finish()
        return
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ —Ü–µ–Ω
    media = []
    for fname in ["order_price_1.jpg", "order_price_2.jpg", "order_price_3.jpg"]:
        try:
            media.append(InputMediaPhoto(open(fname, "rb")))
        except Exception as e:
            logging.error(f"Cannot open image {fname}: {e}")
    if media:
        await bot.send_media_group(message.chat.id, media)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    await CalcStates.waiting_price.set()

@dp.message_handler(state=CalcStates.waiting_price)
async def calc_price_entered(message: types.Message, state: FSMContext):
    text = message.text.replace(",", ".").strip()
    try:
        price_yuan = float(text)
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1500")
        return
    data = await state.get_data()
    category = data["category"]
    fee = CATEGORY_FEES[category]
    rub_no_fee = round(price_yuan * yuan_rate, 2)
    rub_total = rub_no_fee + fee

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!üî•"))
    markup.add(KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ"))

    await message.answer(
        f"üí∏ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {rub_total} ‚ÇΩ\n\n"
        f"üîπ –°—Ç–æ–∏–º–æ—Å—Ç—å: ¬•{price_yuan} √ó {yuan_rate} ‚ÇΩ = {rub_no_fee} ‚ÇΩ\n"
        f"üîπ –ö–æ–º–∏—Å—Å–∏—è: {fee} ‚ÇΩ\n\n"
        f"üöö –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
        f"600‚ÇΩ/–∫–≥ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞, –¥–∞–ª–µ–µ –ø–æ —Ç–∞—Ä–∏—Ñ—É CDEK/–ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏.\n\n"
        f"üì¶ –¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–∫–∞–∂–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –ø—Ä–∏–±—É–¥–µ—Ç –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫!",
        reply_markup=markup
    )
    await state.finish()

@dp.message_handler(lambda m: m.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
async def return_to_start(message: types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())

@dp.message_handler(lambda m: m.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!üî•")
async def go_to_order(message: types.Message):
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω —Ç–æ–≤–∞—Ä–∞:")
    await OrderStates.waiting_screenshot.set()

# === –í–µ—Ç–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ===

@dp.message_handler(state=OrderStates.waiting_screenshot, content_types=types.ContentType.PHOTO)
async def order_received_screenshot(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    await state.update_data(screenshot=photo.file_id)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä (–º–æ–∂–µ—Ç –±—ã—Ç—å –±—É–∫–≤–µ–Ω–Ω—ã–º –∏–ª–∏ —á–∏—Å–ª–æ–≤—ã–º). –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä–∞ –Ω–µ—Ç ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ 0.")
    await OrderStates.waiting_size.set()

@dp.message_handler(state=OrderStates.waiting_screenshot)
async def order_wrong_screenshot(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.")

@dp.message_handler(state=OrderStates.waiting_size)
async def order_received_size(message: types.Message, state: FSMContext):
    size = message.text.strip()
    await state.update_data(size=size)

    media = []
    for fname in ["order_price_1.jpg", "order_price_2.jpg", "order_price_3.jpg"]:
        try:
            media.append(InputMediaPhoto(open(fname, "rb")))
        except Exception as e:
            logging.error(f"Cannot open image {fname}: {e}")
    if media:
        await bot.send_media_group(message.chat.id, media)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    await OrderStates.waiting_price.set()

@dp.message_handler(state=OrderStates.waiting_price)
async def order_received_price(message: types.Message, state: FSMContext):
    text = message.text.replace(",", ".").strip()
    try:
        price_yuan = float(text)
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1500")
        return

    await state.update_data(price_yuan=price_yuan)
    data = await state.get_data()

    rub_no_fee = round(price_yuan * yuan_rate, 2)
    # –∫–æ–º–∏—Å—Å–∏—è –Ω–µ –±–µ—Ä—ë–º, —Ç–æ–ª—å–∫–æ –∫—É—Ä—Å —é–∞–Ω—è
    caption = (
        f"üìã –ò—Ç–æ–≥ –∑–∞–∫–∞–∑–∞:\n"
        f"-------------------\n"
        f"üìè –†–∞–∑–º–µ—Ä: {data.get('size')}\n"
        f"üí¥ –°—Ç–æ–∏–º–æ—Å—Ç—å: ¬•{price_yuan}\n"
        f"üí∏ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {rub_no_fee} ‚ÇΩ (–∫—É—Ä—Å {yuan_rate} ‚ÇΩ/¬•)\n\n"
        f"üöö –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
        f"600‚ÇΩ/–∫–≥ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞, –¥–∞–ª–µ–µ –ø–æ —Ç–∞—Ä–∏—Ñ—É CDEK/–ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏.\n\n"
        f"üì¶ –¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–∫–∞–∂–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –ø—Ä–∏–±—É–¥–µ—Ç –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫."
    )

    await bot.send_photo(
        message.chat.id,
        data.get("screenshot"),
        caption=caption,
        reply_markup=edit_order_markup()
    )
    await OrderStates.waiting_confirmation.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@dp.callback_query_handler(state=OrderStates.waiting_confirmation)
async def order_edit_callback(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if call.data == "edit_screenshot":
        await call.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω —Ç–æ–≤–∞—Ä–∞:")
        await OrderStates.waiting_screenshot.set()
        await call.answer()
    elif call.data == "edit_size":
        await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä (–∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ—Ç):")
        await OrderStates.waiting_size.set()
        await call.answer()
    elif call.data == "edit_price":
        media = []
        for fname in ["order_price_1.jpg", "order_price_2.jpg", "order_price_3.jpg"]:
            try:
                media.append(InputMediaPhoto(open(fname, "rb")))
            except Exception as e:
                logging.error(f"Cannot open image {fname}: {e}")
        if media:
            await bot.send_media_group(call.message.chat.id, media)
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
        await OrderStates.waiting_price.set()
        await call.answer()
    elif call.data == "confirm_order":
        caption = call.message.caption or ""
        caption += "\n\n‚û° –ü–µ—Ä–µ—à–ª–∏—Ç–µ –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
        await call.message.edit_caption(caption=caption, reply_markup=manager_button())
        await call.answer("–°–ø–∞—Å–∏–±–æ! –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω.")
        await state.finish()

# --- –í–µ–±—Å–µ—Ä–≤–µ—Ä (Render) ---
async def handle(request):
    return web.Response(text="Bot is running")

async def start_webserver():
    app = web.Application()
    app.add_routes([web.get('/', handle)])
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.environ.get("PORT", 8000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    logging.info(f"Webserver started on port {port}")

async def main():
    await start_webserver()
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())
