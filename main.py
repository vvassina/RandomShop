import logging
import os
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    InputMediaPhoto
)
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID") or "-1002687753071"
YUAN_RATE = float(os.getenv("YUAN_RATE", 11.5))

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)

# ------- –ö–æ–º–∏—Å—Å–∏—è -------
CATEGORY_COMMISSION = {
    "–û–±—É–≤—å/–ö—É—Ä—Ç–∫–∏": 1000,
    "–î–∂–∏–Ω—Å—ã/–ö–æ—Ñ—Ç—ã": 800,
    "–®—Ç–∞–Ω—ã/–Æ–±–∫–∏/–ü–ª–∞—Ç—å—è": 600,
    "–§—É—Ç–±–æ–ª–∫–∏/–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": 600,
    "–ß–∞—Å—ã/–£–∫—Ä–∞—à–µ–Ω–∏—è": 1000,
    "–°—É–º–∫–∏/–†—é–∫–∑–∞–∫–∏": 900,
    "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ": 0
}

# ------- –î–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç –ö–∏—Ç–∞—è –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞ -------
CATEGORY_DELIVERY = {
    "–û–±—É–≤—å/–ö—É—Ä—Ç–∫–∏": 1200,
    "–î–∂–∏–Ω—Å—ã/–ö–æ—Ñ—Ç—ã": 950,
    "–®—Ç–∞–Ω—ã/–Æ–±–∫–∏/–ü–ª–∞—Ç—å—è": 800,
    "–§—É—Ç–±–æ–ª–∫–∏/–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": 700,
    "–ß–∞—Å—ã/–£–∫—Ä–∞—à–µ–Ω–∏—è": 1000,
    "–°—É–º–∫–∏/–†—é–∫–∑–∞–∫–∏": 1000,
    "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ": 0
}

MAIN_MENU = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("üí¥ –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞"),
    KeyboardButton("üõçÔ∏è –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞")
)

CATEGORY_MENU = ReplyKeyboardMarkup(resize_keyboard=True).add(*[
    KeyboardButton(cat) for cat in CATEGORY_COMMISSION
])

class OrderStates(StatesGroup):
    WaitingForPhoto = State()
    WaitingForSize = State()
    WaitingForCategory = State()
    WaitingForYuan = State()
    WaitingForContact = State()
    WaitingForAction = State()

class CalcStates(StatesGroup):
    WaitingForCategory = State()
    WaitingForYuan = State()

# ====== START ======
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    try:
        with open("start.jpg", "rb") as photo:
            await bot.send_photo(
                message.chat.id,
                photo,
                caption=(
                    "–ü—Ä–∏–≤–µ—Ç!üëãüèº\n\n"
                    "–Ø –ø–æ–º–æ–≥—É –í–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!\n\n"
                    "üí¨ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:</b>"
                ),
                reply_markup=MAIN_MENU,
                parse_mode="HTML"
            )
    except:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëãüèº", reply_markup=MAIN_MENU)

# ====== –†–ê–°–ß–Å–¢ ======
@dp.message_handler(lambda m: m.text == "üí¥ –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞")
async def start_calc(message: types.Message, state: FSMContext):
    await message.answer("üóÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=CATEGORY_MENU)
    await CalcStates.WaitingForCategory.set()

@dp.message_handler(lambda m: m.text in CATEGORY_COMMISSION, state=CalcStates.WaitingForCategory)
async def calc_category_chosen(message: types.Message, state: FSMContext):
    category = message.text
    await state.update_data(category=category)

    if category == "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ":
        await message.answer(
            "‚ùó –¢–∞–∫–æ–µ —Å—á–∏—Ç–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É üòä",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("–ú–µ–Ω–µ–¥–∂–µ—Ä", url="https://t.me/dadmaksi")
            )
        )
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üõçÔ∏è –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞", "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ:", reply_markup=markup)
        await state.finish()
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Ä–∞—Å—á—ë—Ç–∞
    try:
        media = types.MediaGroup()
        media.attach_photo(types.InputFile("order_price_1.jpg"))
        media.attach_photo(types.InputFile("order_price_2.jpg"))
        media.attach_photo(types.InputFile("order_price_3.jpg"))
        await bot.send_media_group(message.chat.id, media)
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")

    await message.answer("üí¥ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (¬•):")
    await CalcStates.WaitingForYuan.set()

@dp.message_handler(state=CalcStates.WaitingForYuan)
async def calc_price_final(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        category = data["category"]
        commission = CATEGORY_COMMISSION[category]
        delivery = CATEGORY_DELIVERY[category]
        yuan = float(message.text.replace(",", "."))
        rub_price = round(yuan * YUAN_RATE, 2)
        total = round(rub_price + commission + delivery, 2)

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üõçÔ∏è –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞", "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")

        await message.answer(
            f"<b>üí∏ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total} ‚ÇΩ</b> üî•\n\n"
            f"üí± <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å —é–∞–Ω—è (¬•): {YUAN_RATE} ‚ÇΩ</b>\n"
            f"‚óæ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:\n"
            f"      ¬•{yuan} √ó {YUAN_RATE} ‚ÇΩ = {rub_price} ‚ÇΩ\n"
            f"‚óæ –ö–æ–º–∏—Å—Å–∏—è: {commission} ‚ÇΩ\n"
            f"‚óæ –î–æ—Å—Ç–∞–≤–∫–∞ (–ö–∏—Ç–∞–π ‚Üí –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)\n"
            f"      :{delivery} ‚ÇΩ\n"
            f"üì¶  <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</b>: –ø–æ—Å–ª–µ –ø—Ä–∏–±—ã—Ç–∏—è –∑–∞–∫–∞–∑–∞ –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Ç–∞—Ä–∏—Ñ—ã CDEK/–ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏ ‚Äî <b>—ç—Ç–∞ —Å—É–º–º–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ —Ñ–∞–∫—Ç—É</b>ü´∂üèº\n\n"
            f"<b>üí¨ –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:</b> <a href='https://t.me/dadmaksi'>@dadmaksi</a>",
            reply_markup=markup,
            parse_mode="HTML"
        )
        await state.finish()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞: {e}")
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —é–∞–Ω—è—Ö.")

# ====== –û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê ======
@dp.message_handler(lambda m: m.text == "üõçÔ∏è –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞")
async def start_order(message: types.Message, state: FSMContext):
    await state.update_data(order_items=[])
    await message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")
    await OrderStates.WaitingForPhoto.set()

@dp.message_handler(state=OrderStates.WaitingForPhoto, content_types=types.ContentTypes.PHOTO)
async def order_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo_id=message.photo[-1].file_id)
    await message.answer("üìè –ü—Ä–∏—à–ª–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä M –∏–ª–∏ 44 (–µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä–∞ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ 0):\n\n"
                         "üîô –ù–∞–ø–∏—à–∏—Ç–µ '–Ω–∞–∑–∞–¥' —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ñ–æ—Ç–æ.")
    await OrderStates.WaitingForSize.set()

@dp.message_handler(state=OrderStates.WaitingForSize)
async def order_size(message: types.Message, state: FSMContext):
    if message.text.lower() == "–Ω–∞–∑–∞–¥":
        await message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∑–∞–Ω–æ–≤–æ:")
        await OrderStates.WaitingForPhoto.set()
        return
    await state.update_data(size=message.text)
    await message.answer("üß∑ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=CATEGORY_MENU)
    await OrderStates.WaitingForCategory.set()

@dp.message_handler(lambda m: m.text in CATEGORY_COMMISSION, state=OrderStates.WaitingForCategory)
async def order_category(message: types.Message, state: FSMContext):
    await state.update_data(category=message.text)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Ä–∞—Å—á—ë—Ç–∞
    try:
        media = types.MediaGroup()
        media.attach_photo(types.InputFile("order_price_1.jpg"))
        media.attach_photo(types.InputFile("order_price_2.jpg"))
        media.attach_photo(types.InputFile("order_price_3.jpg"))
        await bot.send_media_group(message.chat.id, media)
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")

    await message.answer("üí¥ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (¬•):\n\n"
                         "üîô –ù–∞–ø–∏—à–∏—Ç–µ '–Ω–∞–∑–∞–¥' —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
    await OrderStates.WaitingForYuan.set()

@dp.message_handler(state=OrderStates.WaitingForYuan)
async def order_yuan(message: types.Message, state: FSMContext):
    if message.text.lower() == "–Ω–∞–∑–∞–¥":
        await message.answer("üß∑ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=CATEGORY_MENU)
        await OrderStates.WaitingForCategory.set()
        return

    try:
        yuan = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —é–∞–Ω—è—Ö.")
        return

    data = await state.get_data()
    order_items = data.get("order_items", [])

    new_item = {
        "photo_id": data["photo_id"],
        "size": data["size"],
        "category": data["category"],
        "yuan": yuan
    }
    order_items.append(new_item)
    await state.update_data(order_items=order_items)

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    await state.update_data(photo_id=None, size=None, category=None, yuan=None)

    if "contact" not in data:
        await message.answer("üì± –ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ Telegram –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        await OrderStates.WaitingForContact.set()
    else:
        await send_summary(message, state)

# ====== –û–¢–ü–†–ê–í–ö–ê –ò –î–ï–ô–°–¢–í–ò–Ø ======
@dp.message_handler(state=OrderStates.WaitingForContact)
async def order_contact(message: types.Message, state: FSMContext):
    forbidden = ["–Ω–∞–∑–∞–¥", "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É"]
    if message.text.lower() == "–Ω–∞–∑–∞–¥":
        await message.answer("üí¥ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (¬•):")
        await OrderStates.WaitingForYuan.set()
        return
    if message.text in forbidden:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω), –∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
        return

    await state.update_data(contact=message.text)
    await send_summary(message, state)

async def send_summary(message: types.Message, state: FSMContext):
    data = await state.get_data()
    items = data.get("order_items", [])
    contact = data.get("contact", "–ù–µ —É–∫–∞–∑–∞–Ω")

    text = "<b>üìù –í–∞—à –∑–∞–∫–∞–∑:</b>\n\n"
    media = []
    grand_total = 0.0

    for idx, item in enumerate(items, start=1):
        yuan = item["yuan"]
        rub = round(yuan * YUAN_RATE, 2)
        commission = CATEGORY_COMMISSION[item["category"]]
        delivery = CATEGORY_DELIVERY[item["category"]]

        text += f"<b>–¢–æ–≤–∞—Ä {idx}:</b>\n"
        text += f"üìè –†–∞–∑–º–µ—Ä: {item['size']}\n"
        text += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item['category']}\n"
        text += f"üí¥ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: ¬•{yuan}\n"
        text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö: {rub} ‚ÇΩ\n"

        if item["category"] != "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ":
            total = round(rub + commission + delivery, 2)
            grand_total += total
            text += f"‚ûï –ö–æ–º–∏—Å—Å–∏—è: {commission} ‚ÇΩ\n"
            text += f"üöö –î–æ—Å—Ç–∞–≤–∫–∞ (–ö–∏—Ç–∞–π ‚Üí –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)\n"
            text += f"      :{delivery} ‚ÇΩ\n"
            text += f"<b>üí∏ –ò—Ç–æ–≥ –ø–æ —ç—Ç–æ–º—É —Ç–æ–≤–∞—Ä—É: {total} ‚ÇΩ</b>\n"
        else:
            text += "‚ùó <i>–ò—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –í–∞–º –Ω–∞–ø–∏—à–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä, —Ç–∞–∫–æ–µ —Å—á–∏—Ç–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.</i>\n"
        text += "\n"
        media.append(types.InputMediaPhoto(item["photo_id"]))

    if grand_total:
        text += f"\n<b>üßæ –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º: {round(grand_total, 2)} ‚ÇΩ</b>\n\n"

    text += f"<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:</b> {contact}"

    try:
        if media:
            await bot.send_media_group(message.chat.id, media)
        await message.answer(text, parse_mode="HTML",
                             reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).row(
                                 "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É").row(
                                 "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ"))
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ summary: {e}")

    await OrderStates.WaitingForAction.set()

@dp.message_handler(lambda m: m.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É", state=OrderStates.WaitingForAction)
async def finish_order(message: types.Message, state: FSMContext):
    data = await state.get_data()
    items = data.get("order_items", [])
    contact = data.get("contact", "–ù–µ —É–∫–∞–∑–∞–Ω")

    text = "<b>üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:</b>\n\n"
    media = []
    grand_total = 0.0

    for idx, item in enumerate(items, start=1):
        yuan = item["yuan"]
        rub = round(yuan * YUAN_RATE, 2)
        commission = CATEGORY_COMMISSION[item["category"]]
        delivery = CATEGORY_DELIVERY[item["category"]]

        text += f"<b>–¢–æ–≤–∞—Ä {idx}:</b>\n"
        text += f"üìè –†–∞–∑–º–µ—Ä: {item['size']}\n"
        text += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item['category']}\n"
        text += f"üí¥ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: ¬•{yuan}\n"
        text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö: {rub} ‚ÇΩ\n"

        if item["category"] != "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ":
            total = round(rub + commission + delivery, 2)
            grand_total += total
            text += f"‚ûï –ö–æ–º–∏—Å—Å–∏—è: {commission} ‚ÇΩ\n"
            text += f"üöö –î–æ—Å—Ç–∞–≤–∫–∞ (–ö–∏—Ç–∞–π ‚Üí –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫): {delivery} ‚ÇΩ\n"
            text += f"<b>üí∏ –ò—Ç–æ–≥ –ø–æ —ç—Ç–æ–º—É —Ç–æ–≤–∞—Ä—É: {total} ‚ÇΩ</b>\n"
        else:
            text += "‚ùó <i>–ò—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω—É–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.</i>\n"
        text += "\n"
        media.append(types.InputMediaPhoto(item["photo_id"]))

    if grand_total:
        text += f"\n<b>üßæ –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º (–±–µ–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏): {round(grand_total, 2)} ‚ÇΩ</b>\n\n"

    text += f"<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞:</b> {contact}"

    try:
        if media:
            await bot.send_media_group(chat_id=GROUP_CHAT_ID, media=media)
        await bot.send_message(chat_id=GROUP_CHAT_ID, text=text, parse_mode="HTML")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ –≥—Ä—É–ø–ø—É: {e}")
        await message.answer("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await message.answer(
        "<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! ü§ç</b>\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ–ø–ª–∞—Ç—ã.",
        parse_mode="HTML",
        reply_markup=MAIN_MENU
    )
    await state.finish()

@dp.message_handler(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", state=OrderStates.WaitingForAction)
async def add_more(message: types.Message, state: FSMContext):
    data = await state.get_data()
    order_items = data.get("order_items", [])
    await state.update_data(photo_id=None, size=None, category=None, yuan=None, order_items=order_items)
    await message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:")
    await OrderStates.WaitingForPhoto.set()

@dp.message_handler(lambda m: m.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", state=OrderStates.WaitingForAction)
async def back_to_start(message: types.Message, state: FSMContext):
    await state.finish()
    await start(message)

@dp.message_handler(lambda m: m.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", state="*")
async def back_to_start_global(message: types.Message, state: FSMContext):
    await state.finish()
    await start(message)


# ====== WEB SERVER ======
async def handle(request):
    return web.Response(text="Bot is running")

async def start_webserver():
    app = web.Application()
    app.add_routes([web.get('/', handle)])
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.environ.get("PORT", 8000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()

# ====== MAIN ======
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(start_webserver())
    executor.start_polling(dp, skip_updates=True)
