import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

CATEGORY_FEES = {
    "–û–±—É–≤—å/–ö—É—Ä—Ç–∫–∏": 1000,
    "–î–∂–∏–Ω—Å—ã/–ö–æ—Ñ—Ç—ã": 800,
    "–®—Ç–∞–Ω—ã/–Æ–±–∫–∏/–ü–ª–∞—Ç—å—è": 600,
    "–§—É—Ç–±–æ–ª–∫–∏/–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": 600,
    "–ß–∞—Å—ã/–£–∫—Ä–∞—à–µ–Ω–∏—è": 1000,
    "–°—É–º–∫–∏/–†—é–∫–∑–∞–∫–∏": 900,
    "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ": 0
}

# –°–¥–µ–ª–∞–µ–º current_category –∏ yuan_rate –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏, —Ö—Ä–∞–Ω–∏–º –≤ –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç
class State:
    current_category = None
    yuan_rate = 11.5

state = State()

def get_main_menu():
    return ReplyKeyboardMarkup(resize_keyboard=True).add(*[KeyboardButton(cat) for cat in CATEGORY_FEES])

@dp.message(commands=["start"])
async def start_handler(message: types.Message):
    state.current_category = None
    try:
        with open("start.jpg", "rb") as photo:
            await bot.send_photo(
                message.chat.id,
                photo,
                caption="–ü—Ä–∏–≤–µ—Ç!üëãüèº\n\n–Ø –ø–æ–º–æ–≥—É –í–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!",
                reply_markup=get_main_menu()
            )
    except Exception as e:
        logging.error(f"Error sending photo: {e}")
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=get_main_menu())

@dp.message()
async def handle_category(message: types.Message):
    if message.text not in CATEGORY_FEES:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    
    state.current_category = message.text

    if state.current_category == "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ":
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me/dadmaksi"))
        await message.answer("–¢–∞–∫–æ–µ —Å—á–∏—Ç–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É üòä", reply_markup=kb)
        return

    try:
        with open("price_input.jpg", "rb") as photo:
            await bot.send_photo(
                message.chat.id,
                photo,
                caption="–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö (¬•):"
            )
    except Exception as e:
        logging.error(f"Error sending price input photo: {e}")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö (¬•):")

@dp.message()
async def calculate_total(message: types.Message):
    if state.current_category is None:
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç ‚Äî —á–∏—Å–ª–æ (—Ü–µ–Ω–∞ –≤ —é–∞–Ω—è—Ö)
    text = message.text.replace(",", ".")
    try:
        yuan = float(text)
    except ValueError:
        return  # –ù–µ —á–∏—Å–ª–æ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    fixed_fee = CATEGORY_FEES[state.current_category]
    rub_no_fee = round(yuan * state.yuan_rate, 2)
    rub = round(rub_no_fee + fixed_fee, 2)

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!üî•", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")

    await message.answer(
        f"üí∏ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {rub} ‚ÇΩ\n\n"
        f"üîπ –°—Ç–æ–∏–º–æ—Å—Ç—å: ¬•{yuan} √ó {state.yuan_rate} ‚ÇΩ = {rub_no_fee} ‚ÇΩ\n"
        f"üîπ –ö–æ–º–∏—Å—Å–∏—è: {fixed_fee} ‚ÇΩ\n\n"
        f"üöö –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
        f"600‚ÇΩ/–∫–≥ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞ + —Ç–∞—Ä–∏—Ñ CDEK/–ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏",
        reply_markup=markup
    )

@dp.message()
async def set_yuan_rate(message: types.Message):
    if not message.text.lower().startswith("set yuan"):
        return
    try:
        new_rate = float(message.text.split()[-1].replace(",", "."))
        state.yuan_rate = new_rate
        await message.answer(f"–ù–æ–≤—ã–π –∫—É—Ä—Å —é–∞–Ω—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {state.yuan_rate} ‚ÇΩ")
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: set yuan 11.7")

@dp.message()
async def handle_buttons(message: types.Message):
    if message.text not in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!üî•"]:
        return

    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ":
        await start_handler(message)
    else:
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me/dadmaksi"))
        await message.answer("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:", reply_markup=kb)

if _name_ == "_main_":
    import asyncio
    asyncio.run(dp.start_polling(bot))
