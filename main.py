import logging
import os
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

CATEGORY_FEES = {
    "–û–±—É–≤—å/–ö—É—Ä—Ç–∫–∏": 1000,
    "–î–∂–∏–Ω—Å—ã/–ö–æ—Ñ—Ç—ã": 800,
    "–®—Ç–∞–Ω—ã/–Æ–±–∫–∏/–ü–ª–∞—Ç—å—è": 600,
    "–§—É—Ç–±–æ–ª–∫–∏/–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": 600,
    "–ß–∞—Å—ã/–£–∫—Ä–∞—à–µ–Ω–∏—è": 1000,
    "–°—É–º–∫–∏/–†—é–∫–∑–∞–∫–∏": 900,
    "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ": 0
}

yuan_rate = float(os.getenv("YUAN_RATE", 11.5))
MANAGER_CHAT_ID = -1001234567890  # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ ID —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –∑–∞–∫–∞–∑–æ–≤

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
# user_orders = {
#   user_id: {
#       "contact": "–Ω–æ–º–µ—Ä –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º",
#       "items": [
#           {"screenshot": file_id, "size": "M", "category": "–û–±—É–≤—å/–ö—É—Ä—Ç–∫–∏", "price_yuan": 100, "price_rub": 0},
#           ...
#       ],
#       "current_step": "awaiting_screenshot" | "awaiting_size" | ...
#       "current_item_index": int,
#   }
# }
user_orders = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞üí¥"))
    kb.add(KeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑üõçÔ∏è"))
    return kb

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def get_category_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(*[KeyboardButton(cat) for cat in CATEGORY_FEES])
    kb.add(KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return kb

# –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
def get_after_calc_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑üõçÔ∏è"))
    kb.add(KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ"))
    return kb

# –ö–Ω–æ–ø–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
def get_edit_keyboard(user_id):
    kb = InlineKeyboardMarkup(row_width=2)
    items = user_orders[user_id]["items"]
    current_idx = user_orders[user_id]["current_item_index"]

    kb.add(
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω", callback_data=f"edit_screenshot_{current_idx}"),
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä", callback_data=f"edit_size_{current_idx}"),
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"edit_category_{current_idx}"),
        InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data=f"edit_price_{current_idx}")
    )
    kb.add(InlineKeyboardButton("–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ ‚úÖ", callback_data="confirm_order"))
    return kb

# –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É / –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä / –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ
def get_post_confirm_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É"))
    kb.add(KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤ –∑–∞–∫–∞–∑"))
    kb.add(KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return kb

# --- –°—Ç–∞—Ä—Ç ---
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    try:
        with open("start.jpg", "rb") as photo:
            await bot.send_photo(
                message.chat.id,
                photo,
                caption="–ü—Ä–∏–≤–µ—Ç!üëãüèº\n\n–Ø –ø–æ–º–æ–≥—É –í–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!",
                reply_markup=get_main_menu()
            )
    except Exception as e:
        logging.error(f"Error sending start photo: {e}")
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=get_main_menu())
    user_orders.pop(message.from_user.id, None)  # –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∑–∞–∫–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@dp.message_handler(lambda m: m.text == "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞üí¥")
async def calc_price_start(message: types.Message):
    kb = get_category_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=kb)

@dp.message_handler(lambda m: m.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑üõçÔ∏è")
async def order_start(message: types.Message):
    user_id = message.from_user.id
    user_orders[user_id] = {
        "contact": None,
        "items": [],
        "current_step": "awaiting_screenshot",
        "current_item_index": 0
    }
    await message.answer("üõçÔ∏è –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n–®–∞–≥ 1Ô∏è‚É£ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω —Ç–æ–≤–∞—Ä–∞")

@dp.message_handler(lambda m: m.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")
async def back_to_start(message: types.Message):
    await cmd_start(message)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–Ω–µ –¥–ª—è –∑–∞–∫–∞–∑–∞) ---
@dp.message_handler(lambda m: m.text in CATEGORY_FEES and m.chat.type != "private" or m.text in CATEGORY_FEES)
async def category_selected_for_calc(message: types.Message):
    category = message.text
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –æ–¥–Ω–æ–º media_group + –∑–∞–ø—Ä–æ—Å —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    try:
        media = types.MediaGroup()
        media.attach_photo(InputFile("price_example_1.jpg"))
        media.attach_photo(InputFile("price_example_2.jpg"))
        media.attach_photo(InputFile("price_example_3.jpg"), caption="–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö (¬•):")
        await bot.send_media_group(message.chat.id, media)
    except Exception as e:
        logging.error(f"Error sending media group: {e}")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö (¬•):")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞
    user_id = message.from_user.id
    if user_id not in user_orders:
        user_orders[user_id] = {}
    user_orders[user_id]["calc_category"] = category

@dp.message_handler(lambda m: "calc_category" in user_orders.get(m.from_user.id, {}) and m.text and m.text.replace(",", "").replace(".", "").isdigit())
async def calculate_cost(message: types.Message):
    user_id = message.from_user.id
    category = user_orders[user_id]["calc_category"]
    try:
        yuan = float(message.text.replace(",", "."))
        fixed_fee = CATEGORY_FEES[category]
        rub_no_fee = round(yuan * yuan_rate, 2)
        rub = round(rub_no_fee + fixed_fee, 2)
        markup = get_after_calc_keyboard()

        await message.answer(
            f"üí∏ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {rub} ‚ÇΩ\n\n"
            f"üîπ –°—Ç–æ–∏–º–æ—Å—Ç—å: ¬•{yuan} √ó {yuan_rate} ‚ÇΩ = {rub_no_fee} ‚ÇΩ\n"
            f"üîπ –ö–æ–º–∏—Å—Å–∏—è: {fixed_fee} ‚ÇΩ\n\n"
            f"üöö –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
            f"600‚ÇΩ/–∫–≥ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞, –¥–∞–ª–µ–µ –ø–æ —Ç–∞—Ä–∏—Ñ—É CDEK/–ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏.\n\n"
            f"üì¶ –¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–∫–∞–∂–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –ø—Ä–∏–±—É–¥–µ—Ç –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫!",
            reply_markup=markup
        )
        # –û—á–∏—Å—Ç–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ—Å–ª–µ —Ä–∞—Å—á—ë—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å
        user_orders[user_id].pop("calc_category", None)
    except Exception as e:
        logging.error(f"Calculation error: {e}")
        await message.answer("–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# --- –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥ ---
@dp.message_handler(content_types=types.ContentType.PHOTO)
async def photo_received(message: types.Message):
    user_id = message.from_user.id
    order = user_orders.get(user_id)
    if not order:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–∫–∞–∑–∞

    step = order.get("current_step")
    idx = order["current_item_index"]

    if step == "awaiting_screenshot":
        photo = message.photo[-1]  # –°–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ
        file_id = photo.file_id

        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –µ—â—ë –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π
        if len(order["items"]) <= idx:
            order["items"].append({
                "screenshot": file_id,
                "size": None,
                "category": None,
                "price_yuan": None,
                "price_rub": None
            })
        else:
            order["items"][idx]["screenshot"] = file_id

        order["current_step"] = "awaiting_size"
        await message.answer("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω!\n\n–®–∞–≥ 2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, M –∏–ª–∏ 42)")

@dp.message_handler(lambda m: True)
async def text_handler(message: types.Message):
    user_id = message.from_user.id
    order = user_orders.get(user_id)
    text = message.text

    if not order:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∑–∞–∫–∞–∑–µ ‚Äî –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        if text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ":
            await cmd_start(message)
        return

    step = order.get("current_step")
    idx = order["current_item_index"]

    if step == "awaiting_size":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
        order["items"][idx]["size"] = text
        order["current_step"] = "awaiting_category"
        await message.answer("–®–∞–≥ 3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_category_keyboard())

    elif step == "awaiting_category":
        if text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
            order["current_step"] = "awaiting_screenshot"
            await message.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ —à–∞–≥—É 1Ô∏è‚É£ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω —Ç–æ–≤–∞—Ä–∞")
            return

        if text not in CATEGORY_FEES:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é¬ª")
            return

        order["items"][idx]["category"] = text

        if text == "–¢–µ—Ö–Ω–∏–∫–∞/–î—Ä—É–≥–æ–µ":
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me/dadmaksi"))
            await message.answer("–¢–∞–∫–æ–µ —Å—á–∏—Ç–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É üòä", reply_markup=kb)
            # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑
            order["current_step"] = "awaiting_post_order_action"
            await send_order_summary(message)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 3 –∫–∞—Ä—Ç–∏–Ω–∫–∏ + –∑–∞–ø—Ä–æ—Å —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        try:
            media = types.MediaGroup()
            media.attach_photo(InputFile("price_example_1.jpg"))
            media.attach_photo(InputFile("price_example_2.jpg"))
            media.attach_photo(InputFile("price_example_3.jpg"), caption="–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö (¬•):")
            await bot.send_media_group(message.chat.id, media)
        except Exception as e:
            logging.error(f"Error sending media group: {e}")
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö (¬•):")

        order["current_step"] = "awaiting_price"

    elif step == "awaiting_price":
        try:
            price_yuan = float(text.replace(",", "."))
            order["items"][idx]["price_yuan"] = price_yuan
            fixed_fee = CATEGORY_FEES[order["items"][idx]["category"]]
            rub_no_fee = round(price_yuan * yuan_rate, 2)
            price_rub = round(rub_no_fee + fixed_fee, 2)
            order["items"][idx]["price_rub"] = price_rub

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º
            if not order["contact"]:
                order["current_step"] = "awaiting_contact"
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ Telegram username (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):")
                return

            order["current_step"] = "awaiting_post_order_action"
            await send_order_summary(message)

        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —á–∏—Å–ª–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 150.5)")

    elif step == "awaiting_contact":
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        contact = text.strip()
        order["contact"] = contact
        order["current_step"] = "awaiting_post_order_action"
        await send_order_summary(message)

    elif step == "awaiting_post_order_action":
        if text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É":
            await send_order_to_manager(message)
            await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –°–∫–æ—Ä–æ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏‚ù§Ô∏è", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")))
            user_orders.pop(user_id, None)  # –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏

        elif text == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤ –∑–∞–∫–∞–∑":
            order["current_item_index"] = len(order["items"])
            order["current_step"] = "awaiting_screenshot"
            await message.answer("–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é.\n\n–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω —Ç–æ–≤–∞—Ä–∞")

        elif text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            user_orders.pop(user_id, None)
            await cmd_start(message)

        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:\n"
                                 "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É, –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤ –∑–∞–∫–∞–∑ –∏–ª–∏ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    else:
        # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ—Ç–≤–µ—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=get_main_menu())

# --- –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –∑–∞–∫–∞–∑–∞ ---
async def send_order_summary(message: types.Message):
    user_id = message.from_user.id
    order = user_orders[user_id]
    items = order["items"]

    text = f"–í–∞—à –∑–∞–∫–∞–∑:\n\n"
    total_rub = 0
    for i, item in enumerate(items, 1):
        text += f"–¢–æ–≤–∞—Ä {i}:\n"
        text += f" - –†–∞–∑–º–µ—Ä: {item.get('size')}\n"
        text += f" - –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.get('category')}\n"
        price_yuan = item.get("price_yuan")
        price_rub = item.get("price_rub")
        if price_yuan and price_rub:
            text += f" - –¶–µ–Ω–∞: ¬•{price_yuan} (~{price_rub} ‚ÇΩ)\n"
            total_rub += price_rub
        text += "\n"

    text += f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_rub} ‚ÇΩ\n\n"
    text += "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É, –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é."

    await message.answer(text, reply_markup=get_post_confirm_keyboard())

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ ---
async def send_order_to_manager(message: types.Message):
    user_id = message.from_user.id
    order = user_orders.get(user_id)
    if not order:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return

    items = order["items"]
    contact = order.get("contact", "–ù–µ —É–∫–∞–∑–∞–Ω")

    caption = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{message.from_user.username or message.from_user.id} (ID: {user_id})\n–ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n\n"
    total_rub = 0
    media_group = types.MediaGroup()

    for i, item in enumerate(items, 1):
        caption += f"–¢–æ–≤–∞—Ä {i}:\n"
        caption += f"–†–∞–∑–º–µ—Ä: {item.get('size')}\n"
        caption += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.get('category')}\n"
        price_yuan = item.get("price_yuan")
        price_rub = item.get("price_rub")
        if price_yuan and price_rub:
            caption += f"–¶–µ–Ω–∞: ¬•{price_yuan} (~{price_rub} ‚ÇΩ)\n"
            total_rub += price_rub
        caption += "\n"
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω –≤ media_group
        media_group.attach_photo(item["screenshot"])

    caption += f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_rub} ‚ÇΩ"

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º media group —Å –ø–æ–¥–ø–∏—Å—å—é –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ
        # Telegram API –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        if media_group.media:
            media_group.media[0].caption = caption
            await bot.send_media_group(MANAGER_CHAT_ID, media_group.media)
        else:
            await bot.send_message(MANAGER_CHAT_ID, caption)
    except Exception as e:
        logging.error(f"Error sending order to manager: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ inline (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ) ---
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("edit_"))
async def process_edit_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data
    order = user_orders.get(user_id)
    if not order:
        await callback_query.answer("–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    parts = data.split("_")  # –Ω–∞–ø—Ä–∏–º–µ—Ä, edit_size_0
    if len(parts) != 3:
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    action, field, idx_str = parts
    idx = int(idx_str)
    order["current_item_index"] = idx

    if field == "screenshot":
        order["current_step"] = "awaiting_screenshot"
        await bot.send_message(user_id, f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ {idx + 1}: –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω.")
    elif field == "size":
        order["current_step"] = "awaiting_size"
        await bot.send_message(user_id, f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ {idx + 1}: –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä.")
    elif field == "category":
        order["current_step"] = "awaiting_category"
        await bot.send_message(user_id, f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ {idx + 1}: –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.", reply_markup=get_category_keyboard())
    elif field == "price":
        order["current_step"] = "awaiting_price"
        try:
            media = types.MediaGroup()
            media.attach_photo(InputFile("price_example_1.jpg"))
            media.attach_photo(InputFile("price_example_2.jpg"))
            media.attach_photo(InputFile("price_example_3.jpg"), caption="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö (¬•):")
            await bot.send_media_group(user_id, media)
        except Exception as e:
            logging.error(f"Error sending media group for price edit: {e}")
            await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö (¬•):")
    else:
        await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return

    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == "confirm_order")
async def confirm_order_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ! –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ.\n"
                                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É' —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.\n"
                                    "–ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –µ—â—ë –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
                           reply_markup=get_post_confirm_keyboard())
    user_orders[user_id]["current_step"] = "awaiting_post_order_action"
    await callback_query.answer()

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
